

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (4 November 2021 18:14:12) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!


----End fileIn of C:\Users\maxi\Desktop\TusLibros it3\TusLibros.st----!

----QUIT----(4 November 2021 18:14:54) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (4 November 2021 19:49:23) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!


TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestXX category: 'TusLibros' stamp: 'MF 11/4/2021 19:50:59'!
TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 19:53:41'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestXX methodsFor: 'no messages' stamp: 'MF 11/4/2021 19:53:37'!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface new.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:53:50'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:54:00'!
createCartFor: aString with: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:54:12' prior: 50915433!
createCartFor: anUser with: aPassword 
	^1.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:54:14'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:54:21'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:54:28' prior: 50915446!
listCart: aSmallInteger 
	^OrderedCollection new.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:54:29'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:54:29'!
PASSED!

!classDefinition: #AuthenticatingSystemSimulator category: 'TusLibros' stamp: 'MF 11/4/2021 19:57:15'!
Object subclass: #AuthenticatingSystemSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:57:12' prior: 50915421!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true).
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:57:18'!
ERROR!
!AuthenticatingSystemSimulator class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 19:57:29'!
with: aTrue 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aTrue ! !
!AuthenticatingSystemSimulator class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 19:57:56' prior: 50915483!
with: aBooleanToReturnWhenAuthenticating 

	^self new initializeWith: aBooleanToReturnWhenAuthenticating.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:57:57'!
ERROR!

!classDefinition: #AuthenticatingSystemSimulator category: 'TusLibros' stamp: 'MF 11/4/2021 19:58:03'!
Object subclass: #AuthenticatingSystemSimulator
	instanceVariableNames: 'booleanToReturnWhenAuthenticating'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatingSystemSimulator methodsFor: 'initialization' stamp: 'MF 11/4/2021 19:58:03'!
initializeWith: aBooleanToReturnWhenAuthenticating 
	self shouldBeImplemented.
	booleanToReturnWhenAuthenticating := aBooleanToReturnWhenAuthenticating.! !
!AuthenticatingSystemSimulator methodsFor: 'initialization' stamp: 'MF 11/4/2021 19:58:07' prior: 50915510!
initializeWith: aBooleanToReturnWhenAuthenticating 
	
	booleanToReturnWhenAuthenticating := aBooleanToReturnWhenAuthenticating.! !

!classDefinition: #AuthenticatingSystemSimulator category: 'TusLibros' stamp: 'MF 11/4/2021 19:58:15'!
Object subclass: #AuthenticatingSystemSimulator
	instanceVariableNames: 'booleanToReturn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatingSystemSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 19:58:15' prior: 50915519!
initializeWith: aBooleanToReturnWhenAuthenticating 
	
	booleanToReturn := aBooleanToReturnWhenAuthenticating.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:58:18'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 19:58:24'!
authenticatingWith: anAuthenticatingSystemSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAuthenticatingWith: anAuthenticatingSystemSimulator ! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 19:58:34' prior: 50915544!
authenticatingWith: anAuthenticatingSystem
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:58:36'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 19:58:41'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 19:58:41'!
initializeAuthenticatingWith: anAuthenticatingSystem 
	self shouldBeImplemented.
	authenticatingSystem := anAuthenticatingSystem.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 19:58:43' prior: 50915571!
initializeAuthenticatingWith: anAuthenticatingSystem 
	
	authenticatingSystem := anAuthenticatingSystem.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:58:44'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 19:58:44'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:01:36'!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true).
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: AuthenticatingSystemSimulator usernameOrPasswordIsInvalidErrorMessage ]! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:01:40'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:02:53' prior: 50915589!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true).
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:03:20' prior: 50915439!
createCartFor: anUser with: aPassword 
	
	( authenticatingSystem authenticate: anUser with: aPassword ) ifFalse: [
		self error: self class usernameOrPasswordIsInvalidErrorMessage]
	
	^1.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:03:23' prior: 50915623!
createCartFor: anUser with: aPassword 
	
	( authenticatingSystem authenticate: anUser with: aPassword ) ifFalse: [
		self error: self class usernameOrPasswordIsInvalidErrorMessage ]
	
	^1.! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:03:25'!
ERROR!
!AuthenticatingSystemSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:03:40'!
authenticate: aString with: aString2 
	self shouldBeImplemented.! !
!AuthenticatingSystemSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:03:53' prior: 50915645!
authenticate: aUsername with: aPassword 
	^booleanToReturn ! !
!AuthenticatingSystemSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:03:56' prior: 50915651!
authenticate: aUsername with: aPassword 
	
	^booleanToReturn ! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:03:57'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:04:05' prior: 50915633!
createCartFor: anUser with: aPassword 
	
	( authenticatingSystem authenticate: anUser with: aPassword ) ifFalse: [
		self error: self class usernameOrPasswordIsInvalidErrorMessage ].
	
	^1.! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:04:07'!
ERROR!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:04:12'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:04:22' prior: 50915607!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false).
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:04:24'!
ERROR!
!TusLibrosInterface class methodsFor: 'error messages' stamp: 'MF 11/4/2021 20:04:35'!
usernameOrPasswordIsInvalidErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'error messages' stamp: 'MF 11/4/2021 20:04:43' prior: 50915696!
usernameOrPasswordIsInvalidErrorMessage
	
	^'Username or password is invalid!!'! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:04:44'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:04:44'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:04:44'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:03' prior: 50915665!
createCartFor: anUser with: aPassword 
	
	( authenticatingSystem authenticate: anUser with: aPassword ) ifFalse: [ self error: self class usernameOrPasswordIsInvalidErrorMessage ].
	
	^1.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:08' prior: 50915715!
createCartFor: anUser with: aPassword 
	
	(authenticatingSystem authenticate: anUser with: aPassword) ifFalse: [ self error: self class usernameOrPasswordIsInvalidErrorMessage ].
	
	^1.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:34'!
authenticate: aPassword with: anUser

	^ (authenticatingSystem authenticate: anUser with: aPassword) ifFalse: [ self error: self class usernameOrPasswordIsInvalidErrorMessage ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:34' prior: 50915725!
createCartFor: anUser with: aPassword 
	
	self authenticate: aPassword with: anUser.
	
	^1.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:57'!
signalUsernameOrPasswordIsInvalid

	^ self error: self class usernameOrPasswordIsInvalidErrorMessage! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:05:57' prior: 50915734!
authenticate: aPassword with: anUser

	^ (authenticatingSystem authenticate: anUser with: aPassword) ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:06:00'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:06:00'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:06:00'!
PASSED!

!classDefinition: #TestXX category: 'TusLibros' stamp: 'MF 11/4/2021 20:07:56'!
TestCase subclass: #TestXX
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:07:55' overrides: 16927572!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:09:13'!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true).
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId aProduct: product quantity: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:10:22'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:10:34'!
addToCart: aSmallInteger aProduct: aString quantity: aSmallInteger3 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:11:26' prior: 50915801!
addToCart: aCartId aProduct: aProduct quantity: aQuantity

	 
	
	! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:12:05'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:12:02' prior: 50915808!
addToCart: aCartId aProduct: aProduct quantity: aQuantity

	cart add: aQuantity of: aProduct.
	
	! !

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:12:22'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:12:39' prior: 50915743!
createCartFor: anUser with: aPassword 
	
	self authenticate: aPassword with: anUser.
	
	cart _ Cart new.
	^1.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:12:42'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:12:42'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:12:42'!
ERROR!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:12:42'!
ERROR!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 20:13:50'!
authenticatingWith: anAuthenticatingSystem aCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:13:50' prior: 50915468!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) aCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:13:50' prior: 50915679!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) aCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:13:50' prior: 50915783!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) aCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId aProduct: product quantity: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !

!methodRemoval: TusLibrosInterface class #authenticatingWith: stamp: 'MF 11/4/2021 20:13:50'!
authenticatingWith: anAuthenticatingSystem
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:02' prior: 50915853!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						aCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:08' prior: 50915867!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					aCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:12' prior: 50915884!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					aCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId aProduct: product quantity: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 20:14:30'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:30' prior: 50915939!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId aProduct: product quantity: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:30' prior: 50915922!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:14:30' prior: 50915908!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!methodRemoval: TusLibrosInterface class #authenticatingWith:aCatalog: stamp: 'MF 11/4/2021 20:14:30'!
authenticatingWith: anAuthenticatingSystem aCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.!
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/4/2021 20:14:53' prior: 50915957!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:15:22'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:15:22' prior: 50916022!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog.! !

!methodRemoval: TusLibrosInterface #initializeAuthenticatingWith: stamp: 'MF 11/4/2021 20:15:22'!
initializeAuthenticatingWith: anAuthenticatingSystem 
	
	authenticatingSystem := anAuthenticatingSystem.!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:15:38'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:15:37' prior: 50916029!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:15:55' prior: 50915831!
createCartFor: anUser with: aPassword 
	
	self authenticate: aPassword with: anUser.
	
	cart _ Cart acceptingItemsOf: catalog.
	
	^1.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:15:56'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:15:56'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:15:56'!
FAILURE!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:15:56'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:16:03' prior: 50915451!
listCart: aSmallInteger 

	^OrderedCollection new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:16:54' prior: 50916084!
listCart: aSmallInteger 

	^cart.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:16:58'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:16:58'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:16:58'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:17:25' prior: 50916089!
listCart: aSmallInteger 

	^cart.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:17:31' prior: 50916100!
listCart: aCartId 

	^cart.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:22:52'!
addToCart: aCartId of: aProduct withOccurences: aQuantity

	cart add: aQuantity of: aProduct.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:22:52' prior: 50915965!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId of: product withOccurences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !

!methodRemoval: TusLibrosInterface #addToCart:aProduct:quantity: stamp: 'MF 11/4/2021 20:22:52'!
addToCart: aCartId aProduct: aProduct quantity: aQuantity

	cart add: aQuantity of: aProduct.
	
	!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:25:32'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:25:32'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:25:32'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:25:32'!
PASSED!
!Cart methodsFor: 'nil' stamp: 'MF 11/4/2021 20:27:56'!
contents

	^items copy! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'MF 11/4/2021 20:28:10'!
Object subclass: #Cart
	instanceVariableNames: 'catalog contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914896!
total

	^ contents sum: [ :anItem | catalog at: anItem ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914878!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	contents := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914900!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | contents add: anItem ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914884!
occurrencesOf: anItem

	^contents occurrencesOf: anItem  ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914892!
isEmpty
	
	^contents isEmpty ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50914888!
includes: anItem

	^contents includes: anItem ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:28:10' prior: 50916147!
contents

	^contents copy! !
!Cart methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:28:35' prior: 50916163!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	contents := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/4/2021 20:28:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/4/2021 20:28:35'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'MF 11/4/2021 20:29:01' prior: 50916169!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	contents add: anItem withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/4/2021 20:29:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:29:04'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:29:04'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:29:19' prior: 50916105!
listCart: aCartId 

	^cart contents.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:29:20'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:29:20'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:29:20'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:36:35'!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId1 _ interface createCartFor: 'Username' with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 of: product withOccurences: 1.
	interface addToCart: cartId2 of: product  withOccurences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:36:47'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:38:27'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem cart catalog cartDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:38:30'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem cart catalog cartDictionary newId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:38:25' prior: 50916068!
createCartFor: anUser with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: anUser.
	
	cartDictionary at: newId put: (Cart acceptingItemsOf: catalog).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:38:35'!
ERROR!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:38:35'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:38:35'!
ERROR!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:38:35'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:39:02' prior: 50916311!
listCart: aCartId 

	^(cartDictionary at: aCartId) contents.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:03'!
ERROR!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:39:03'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:39:03'!
ERROR!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:39:03'!
ERROR!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:07'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:39:24' prior: 50916060!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 0.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:39:32' prior: 50916403!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:33'!
ERROR!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:39:33'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:39:33'!
ERROR!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:39:33'!
ERROR!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:36'!
ERROR!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:36'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/4/2021 20:39:49' prior: 50916412!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	cartDictionary _ Dictionary new.! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:39:50'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:39:50'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:39:50'!
ERROR!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:39:50'!
ERROR!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:39:51'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:40:19' prior: 50916109!
addToCart: aCartId of: aProduct withOccurences: aQuantity

	(cartDictionary at: aCartId) add: aQuantity of: aProduct.
	
	! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:40:20'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:40:20'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:40:20'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:40:20'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:41:07'!
cartWithId: aCartId

	^ cartDictionary at: aCartId! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:41:07' prior: 50916387!
listCart: aCartId 

	^(self cartWithId: aCartId) contents.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:41:07' prior: 50916453!
addToCart: aCartId of: aProduct withOccurences: aQuantity

	(self cartWithId: aCartId) add: aQuantity of: aProduct.
	
	! !

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:41:23'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:41:23'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:41:26'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:41:26'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:41:26'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:41:26'!
PASSED!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:41:46'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem catalog cartDictionary newId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/4/2021 20:42:35'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:42:35' prior: 50916433!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:42:35' prior: 50916368!
createCartFor: anUser with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: anUser.
	
	currentCarts at: newId put: (Cart acceptingItemsOf: catalog).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:42:35' prior: 50916468!
cartWithId: aCartId

	^ currentCarts at: aCartId! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:44:14'!
test05

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:44:51'!
ERROR!
!TusLibrosInterface class methodsFor: 'error messages' stamp: 'MF 11/4/2021 20:45:04'!
cartIdDoesNotExistErrorMessage
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'error messages' stamp: 'MF 11/4/2021 20:45:20' prior: 50916559!
cartIdDoesNotExistErrorMessage
	
	^'No cart was found'! !

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:45:22'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:45:48' prior: 50916536!
cartWithId: aCartId

	^ currentCarts at: aCartId ifAbsent: [ self error: self class cartIdDoesNotExistErrorMessage ]! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:45:48'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:45:48'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:45:49'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:45:49'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:45:49'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:46:13'!
signalCartIdIsInvalid

	^ self error: self class cartIdDoesNotExistErrorMessage! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:46:13' prior: 50916573!
cartWithId: aCartId

	^ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:47:14'!
test06

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId of: testObjectsFactory itemSellByTheStore withOccurences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:47:26'!
addToCart: aCartId of: aProduct withOccurrences: aQuantity

	(self cartWithId: aCartId) add: aQuantity of: aProduct.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:47:26' prior: 50916115!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId of: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:47:26' prior: 50916602!
test06

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId of: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:47:26' prior: 50916321!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId1 _ interface createCartFor: 'Username' with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 of: product withOccurrences: 1.
	interface addToCart: cartId2 of: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !

!methodRemoval: TusLibrosInterface #addToCart:of:withOccurences: stamp: 'MF 11/4/2021 20:47:26'!
addToCart: aCartId of: aProduct withOccurences: aQuantity

	(self cartWithId: aCartId) add: aQuantity of: aProduct.
	
	!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:33'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:36'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:38'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:42'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:47:59'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:56:13' prior: 50915756!
authenticate: anUser with: aPassword

	^ (authenticatingSystem authenticate: anUser with: aPassword) ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 20:56:14'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:56:31' prior: 50916768!
authenticate: aClientId with: aPassword

	^ (authenticatingSystem authenticate: aClientId with: aPassword) ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:56:37' prior: 50916791!
authenticate: aUserId with: aPassword

	^ (authenticatingSystem authenticate: aUserId with: aPassword) ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 20:56:45' prior: 50916526!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId put: (Cart acceptingItemsOf: catalog).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 21:00:21'!
test07

	| interface invalidCartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	
	self
		should: [ interface checkOutCart: invalidCartId with: creditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #TestXX #test07 stamp: 'MF 11/4/2021 21:00:33'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 21:00:39'!
checkOutCart: aSmallInteger with: aCreditCard 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/4/2021 21:00:56' prior: 50916841!
checkOutCart: aCartId with: aCreditCard 
	
	self cartWithId: aCartId.! !

!testRun: #TestXX #test07 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/4/2021 21:00:57'!
PASSED!

----QUIT----(4 November 2021 22:04:23) CuisUniversity-4913.image priorSource: 18679900!

----STARTUP---- (7 November 2021 15:17:26) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!


DateAndTime now!

FixedGregorianDate !

FixedGregorianDate today!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'MF 11/7/2021 15:18:39' prior: 50915388 overrides: 16896425!
initialize

	today := FixedGregorianDate today.! !

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/7/2021 15:18:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 15:18:42'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 15:18:42'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:13'!
expiredMonthOfYear

	^ Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:13' prior: 50915381!
expiredCreditCard
	
	^CreditCard expiringOn: (self expiredMonthOfYear)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:21' prior: 50916949!
expiredCreditCard
	
	^CreditCard expiringOn: self expiredMonthOfYear! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:37' prior: 50916943!
expiredMonthOfYear

	^ (today previous: 1*month) monthOfYear.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:55'!
notExpiredMonthOfYear

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:55' prior: 50915374!
notExpiredCreditCard
	
	^CreditCard expiringOn: (self notExpiredMonthOfYear)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:19:59' prior: 50916972!
notExpiredCreditCard
	
	^CreditCard expiringOn: self notExpiredMonthOfYear! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:20:11' prior: 50916966!
notExpiredMonthOfYear

	^ (today next: 1*month) monthOfYear.! !

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:20:11'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:20:11'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:20:11'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 15:20:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:20:12'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 15:20:12'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 15:20:12'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 15:20:12'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 15:20:12'!
ERROR!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 15:20:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:20:29'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 15:20:29'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 15:20:29'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 15:20:29'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 15:20:29'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:20:33'!
ERROR!

expiration!

self start!
!CreditCard methodsFor: 'testing' stamp: 'MF 11/7/2021 15:21:31' prior: 50915281!
isExpiredOn: aDate 
	
	^expiration < aDate ! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:21:32'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 15:21:33'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:24:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:25:57'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:27:53' prior: 50916819!
test07

	| interface invalidCartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	self
		should: [ interface checkOutCart: invalidCartId with: creditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:30:06'!
addToCart: aCartId product: aProduct withOccurrences: aQuantity

	(self cartWithId: aCartId) add: aQuantity of: aProduct.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:30:06' prior: 50916646!
test06

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:30:06' prior: 50916665!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId1 _ interface createCartFor: 'Username' with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:30:06' prior: 50916628!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !

!methodRemoval: TusLibrosInterface #addToCart:of:withOccurrences: stamp: 'MF 11/7/2021 15:30:06'!
addToCart: aCartId of: aProduct withOccurrences: aQuantity

	(self cartWithId: aCartId) add: aQuantity of: aProduct.
	
	!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:30:12'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:30:13'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:30:13'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:33:58'!
test08

	| interface invalidCartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	self
		should: [ interface checkOutCart: invalidCartId with: creditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:34:07' prior: 50917370!
test08

	| interface cartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	cartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	self
		should: [ interface checkOutCart: cartId with: creditCard ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:46:16' prior: 50917390!
test08

	| interface cartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:49:50' prior: 50916847!
checkOutCart: aCartId with: aCreditCard 
	
	self cartWithId: aCartId.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:50:28'!
checkOutCart: aCartId with: aCreditCard of: anOwner  
	
	self cartWithId: aCartId.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:50:28' prior: 50917256!
test07

	| interface invalidCartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	self
		should: [ interface checkOutCart: invalidCartId with: creditCard of: 'Lean' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: TusLibrosInterface #checkOutCart:with: stamp: 'MF 11/7/2021 15:50:28'!
checkOutCart: aCartId with: aCreditCard 
	
	self cartWithId: aCartId.!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:50:44' prior: 50917428!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner  
	
	self cartWithId: aCartId.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:52:00'!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	self cartWithId: aCartId.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:52:00' prior: 50917434!
test07

	| interface invalidCartId creditCard |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCard _ testObjectsFactory notExpiredCreditCard.
	
	self
		should: [ interface checkOutCart: invalidCartId with: creditCard of: 'Lean' expiringOn: factory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: TusLibrosInterface #checkOutCart:with:of: stamp: 'MF 11/7/2021 15:52:00'!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner  
	
	self cartWithId: aCartId.!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 15:52:53'!
validCCNumber

	^1234567890! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:53:00' prior: 50917472!
test07

	| interface invalidCartId creditCardNumber |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 15:53:01'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:53:08' prior: 50917409!
test08

	| interface cartId creditCardNumber |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	creditCardNumber _ testObjectsFactory notExpiredCreditCard.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 15:53:45' prior: 50917545!
test08

	| interface cartId creditCardNumber |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:21:21' prior: 50917559!
test08

	| interface purchases |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:21:25'!
ERROR!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:21:26'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:21:32'!
listPurchasesOf: aString with: aString2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:21:59' prior: 50917589!
listPurchasesOf: aUserId with: aPassword

	^ OrderedCollection new.
	
	! !

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:22:00'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:22:17'!
test09

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	self
		should: [ interface listPurchasesOf: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:22:18'!
FAILURE!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:22:23'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:22:39' prior: 50917595!
listPurchasesOf: aUserId with: aPassword

	self authenticate: aUserId with: aPassword. 
	
	^ OrderedCollection new.
	
	! !

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:22:41'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:25:18'!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog.
	
	cartId _ interface createCartFor: 'Username' with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 3 equals: (purchases occurrencesOf: product). 
	
	! !

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:25:22'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/7/2021 16:31:47'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'MF 11/7/2021 16:31:50'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:31:44' prior: 50917465!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier |
	cartToCheckout _ self cartWithId: aCartId.
	
	salesBook _ OrderedCollection new.
	
	cashier _ Cashier 
				toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBook.
				
	cashier checkout.
	! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/7/2021 16:32:08' prior: 50916516!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	merchantProcessor _ CashierTest new. "TODO: JESUS CHRIST WTF"! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:32:23' prior: 50917715!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier |
	cartToCheckout _ self cartWithId: aCartId.
	
	cashier _ Cashier 
				toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBook.
				
	cashier checkout.
	! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/7/2021 16:32:26' prior: 50917732!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ CashierTest new. "TODO: JESUS CHRIST WTF"! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:32:43' prior: 50917641!
listPurchasesOf: aUserId with: aPassword

	self authenticate: aUserId with: aPassword. 
	
	^ salesBook copy.
	
	! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:32:44'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:32:50'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:33:04' prior: 50917744!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier |
	cartToCheckout _ self cartWithId: aCartId.
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBook.
				
	cashier checkout.
	! !

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:33:06'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:06'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:06'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:33:14' prior: 50917806!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier |
	cartToCheckout _ self cartWithId: aCartId.
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBook.
				
	cashier checkOut.
	! !

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:33:16'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:16'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:16'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:20'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:33:20'!
ERROR!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'MF 11/7/2021 16:34:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'no messages' stamp: 'MF 11/7/2021 16:34:42'!
debit: anAmount from: aCreditCard! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:34:48'!
debitedCard! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:34:54'!
totalDebited! !
!MerchantProcessorSimulator class methodsFor: 'no messages' stamp: 'MF 11/7/2021 16:35:36'!
withBehaviour: aBlock

	^self new initializeWithBehaviour: aBlock.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'MF 11/7/2021 16:35:54'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'debitBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:35:51'!
initializeWithBehaviour: aBlock

	debitBehaviour _ aBlock.
! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:36:08' prior: 50917900!
debit: anAmount from: aCreditCard

	debitBehaviour value: anAmount value: aCreditCard.! !
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:38:01' prior: 50915222!
test01CanNotCheckoutAnEmptyCart

	| salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	merchantProcessorSimulator _ MerchantProcessorSimulator withBehaviour: debitBehavior.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:38:08' prior: 50917939!
test01CanNotCheckoutAnEmptyCart

	| salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	merchantProcessorSimulator _ MerchantProcessorSimulator withBehaviour: debitBehavior.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: merchantProcessorSimulator
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:38:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:38:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:38:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:38:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:38:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:38:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:38:09'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:38:28' prior: 50917961!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self merchantProcessorSimulator
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'nil' stamp: 'MF 11/7/2021 16:39:19'!
merchantProcessorSimulator

	^MerchantProcessorSimulator withBehaviour: debitBehavior.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:39:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:39:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:39:35' prior: 50915240!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self merchantProcessorSimulator
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:39:40' prior: 50915133!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self merchantProcessorSimulator 
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:39:43' prior: 50915154!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self merchantProcessorSimulator 
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:39:45' prior: 50918092!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self merchantProcessorSimulator
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:39:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:39:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:39:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:39:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:39:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:39:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:39:46'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:39:51' prior: 50915198!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self merchantProcessorSimulator 
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:39:51'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:40:01' prior: 50918153!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self merchantProcessorSimulator 
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:40:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:40:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MF 11/7/2021 16:40:20' prior: 50915172!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self merchantProcessorSimulator 
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:40:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/7/2021 16:40:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/7/2021 16:40:24'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MF 11/7/2021 16:42:18'!
validMerchantProcessorSimulator

	^MerchantProcessorSimulator withBehaviour:  [ :anAmount :aCreditCard | ].! !
!TusLibrosInterface class methodsFor: 'instance creation' stamp: 'MF 11/7/2021 16:43:18'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor  
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:18' prior: 50915983!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50916000!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917572!
test08

	| interface purchases |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917302!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId1 _ interface createCartFor: 'Username' with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917503!
test07

	| interface invalidCartId creditCardNumber |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917669!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 'Username' with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 3 equals: (purchases occurrencesOf: product). 
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50916540!
test05

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917619!
test09

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface listPurchasesOf: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917329!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:19' prior: 50917283!
test06

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: TusLibrosInterface class #authenticatingWith:withCatalog: stamp: 'MF 11/7/2021 16:43:19'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog 
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog.!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:43:27'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:43:27'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:43:27'!
ERROR!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:43:42'!
ERROR!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:51' prior: 50918424!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 'Username' with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 3 equals: (purchases occurrencesOf: product). 
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:55' prior: 50918340!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog 
						withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:43:57' prior: 50918592!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog 
						withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:01' prior: 50918321!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface createCartFor: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:07' prior: 50918489!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 'Username' with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:11' prior: 50918370!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId1 _ interface createCartFor: 'Username' with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:14' prior: 50918451!
test05

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:17' prior: 50918509!
test06

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:19' prior: 50918399!
test07

	| interface invalidCartId creditCardNumber |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:23' prior: 50918356!
test08

	| interface purchases |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:44:26' prior: 50918470!
test09

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface listPurchasesOf: 'Username' with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:44:29'!
ERROR!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/7/2021 16:45:11'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor   
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ CashierTest new. "TODO: JESUS CHRIST WTF"! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:45:11' prior: 50918312!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor  
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor.! !

!methodRemoval: TusLibrosInterface #initializeAuthenticatingWith:withCatalog: stamp: 'MF 11/7/2021 16:45:11'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog  
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ CashierTest new. "TODO: JESUS CHRIST WTF"!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'MF 11/7/2021 16:45:23' prior: 50918793!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor   
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.! !

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:45:25'!
FAILURE!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:46:05'!
FAILURE!

salesBook!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:48:47' prior: 50918565!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 'Username' with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: purchases includes: 30.
	
	! !

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:48:48'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/7/2021 16:49:06' prior: 50918847!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 'Username' with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:49:07'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 16:49:07'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 16:49:07'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 16:49:08'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test01 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test02 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test03 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test04 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test05 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test06 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test07 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test08 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test09 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

!testRun: #TestXX #test10 stamp: 'MF 11/7/2021 17:33:44'!
PASSED!

----STARTUP---- (7 November 2021 17:35:20) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!


!classRemoval: #TusLibrosInterface stamp: 'MF 11/7/2021 17:36:19'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 'MF 11/7/2021 17:36:19'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'MF 11/7/2021 17:36:19'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'MF 11/7/2021 17:36:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'MF 11/7/2021 17:36:20'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'MF 11/7/2021 17:36:20'!
Object subclass: #Cart
	instanceVariableNames: 'catalog contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthenticatingSystemSimulator stamp: 'MF 11/7/2021 17:36:21'!
Object subclass: #AuthenticatingSystemSimulator
	instanceVariableNames: 'booleanToReturn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestXX stamp: 'MF 11/7/2021 17:36:21'!
TestCase subclass: #TestXX
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'MF 11/7/2021 17:36:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MF 11/7/2021 17:36:22'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\maxi\Desktop\TusLibros it3\TusLibros.st----!

----QUIT----(7 November 2021 17:36:43) CuisUniversity-4913.image priorSource: 18726976!

----STARTUP---- (8 November 2021 19:28:38) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!

!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:29:13'!
test11

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:29:50' prior: 50917968!
test11

	| interface invalidCartId |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ interface createCartFor: 1234 with: 'password'. 
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:00' prior: 50917216!
test01

	| cartContents cartId interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog 
						withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 1234 with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:04' prior: 50917232!
test02

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface createCartFor: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:10' prior: 50917250!
test03

	| cartContents cartId interface product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 1234 with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:19' prior: 50917270!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId1 _ interface createCartFor: 1234 with: 'Password'.
	cartId2 _ interface createCartFor: 'Username2' with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:24' prior: 50918063!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId1 _ interface createCartFor: 1234 with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:38' prior: 50917363!
test08

	| interface purchases |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	purchases _ interface listPurchasesOf: 1234 with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:43' prior: 50917377!
test09

	| interface |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface listPurchasesOf: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: TusLibrosInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:30:48' prior: 50917395!
test10

	| interface purchases cartId product |
	interface _ TusLibrosInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 1234 with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !

!testRun: #TestXX #test11 stamp: 'MF 11/8/2021 19:30:52'!
FAILURE!

!classRenamed: #TusLibrosInterface as: #RestInterface stamp: 'MF 11/8/2021 19:31:10'!
Smalltalk renameClassNamed: #TusLibrosInterface as: #RestInterface!
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918024!
test02

	| interface |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface createCartFor: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50917339!
test07

	| interface invalidCartId creditCardNumber |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918121!
test08

	| interface purchases |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	purchases _ interface listPurchasesOf: 1234 with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918154!
test10

	| interface purchases cartId product |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 1234 with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50917318!
test06

	| interface invalidCartId |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918008!
test01

	| cartContents cartId interface |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog 
						withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 1234 with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50917299!
test05

	| interface invalidCartId |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50917987!
test11

	| interface invalidCartId |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	invalidCartId _ interface createCartFor: 1234 with: 'password'. 
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918043!
test03

	| cartContents cartId interface product |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId _ interface createCartFor: 1234 with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918092!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	cartId1 _ interface createCartFor: 1234 with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:31:11' prior: 50918135!
test09

	| interface |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	self
		should: [ interface listPurchasesOf: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!classRenamed: #TestXX as: #RestInterfaceTest stamp: 'MF 11/8/2021 19:31:20'!
Smalltalk renameClassNamed: #TestXX as: #RestInterfaceTest!

TestCase!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:33:36' prior: 50918328!
test11

	| interface cartId |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!classDefinition: #Stopwatch category: 'TusLibros' stamp: 'MF 11/8/2021 19:37:35'!
Object subclass: #Stopwatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:37:52' prior: 50918420!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06'!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918309!
test05

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918245!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: 1234 with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918368!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: 1234 with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918348!
test03

	| cartContents cartId interface product |
	interface _ self restInterface.
	cartId _ interface createCartFor: 1234 with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918231!
test08

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: 1234 with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918206!
test07

	| interface invalidCartId creditCardNumber |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:06' prior: 50918272!
test06

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:38'!
notAuthenticatingRestInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:38' prior: 50918397!
test09

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface listPurchasesOf: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:38' prior: 50918188!
test02

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface createCartFor: 1234 with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:40:43'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:40:52' prior: 50918446!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ self restInterface.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 19:41:05'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:41:05'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:41:05'!
ERROR!
!RestInterface class methodsFor: 'instance creation' stamp: 'MF 11/8/2021 19:41:56'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:41:56' prior: 50918596!
notAuthenticatingRestInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator withStopwatch: self stopwatch! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:41:56' prior: 50918293!
test01

	| cartContents cartId interface |
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
						withCatalog: testObjectsFactory defaultCatalog 
						withMP: testObjectsFactory validMerchantProcessorSimulator withStopwatch: self stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:41:56' prior: 50918469!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator withStopwatch: self stopwatch! !

!methodRemoval: RestInterface class #authenticatingWith:withCatalog:withMP: stamp: 'MF 11/8/2021 19:41:56'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor  
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:42:02' prior: 50918722!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withStopwatch: self stopwatch! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:42:20' prior: 50918705!
test01

	| cartContents cartId interface |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: 1234 with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!RestInterface methodsFor: 'initialization' stamp: 'MF 11/8/2021 19:42:48'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:42:48' prior: 50918682!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch.! !

!methodRemoval: RestInterface #initializeAuthenticatingWith:withCatalog:withMP: stamp: 'MF 11/8/2021 19:42:48'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor   
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'MF 11/8/2021 19:42:58'!
Object subclass: #RestInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId salesBook merchantProcessor stopwatch'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'MF 11/8/2021 19:42:56' prior: 50918764!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	stopwatch _ aStopwatch.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:43:07'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:43:18' prior: 50918743!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withStopwatch: testObjectsFactory stopwatch! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:43:31'!
stopwatch

	^Stopwatch new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:43:33' prior: 50918829!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withStopwatch: testObjectsFactory stopwatch.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 19:43:33'!
ERROR!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:43:33'!
ERROR!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 19:43:33'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:43:33'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:43:45' prior: 50918693!
notAuthenticatingRestInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator 
					withStopwatch: testObjectsFactory stopwatch.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 19:43:46'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:43:46'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:43:46'!
ERROR!

!classDefinition: #Stopwatch category: 'TusLibros' stamp: 'MF 11/8/2021 19:47:42'!
Object subclass: #Stopwatch
	instanceVariableNames: 'timeOffset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Stopwatch methodsFor: 'no messages' stamp: 'MF 11/8/2021 19:47:38' overrides: 16896425!
initialize

	timeOffset _ 0.! !
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:48:02'!
now

	^self globalClock + timeOffset .! !

GregorianDateTime now!
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:50:05'!
globalClock

	^GregorianDateTime now! !

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:50:24'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 19:50:26'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:50:26'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:50:26'!
ERROR!
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:50:50'!
skipAhead: anOffset

	timeOffset _ timeOffset + anOffset.! !
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:50:58' prior: 50918980!
skipAhead: aPositiveOffset

	timeOffset _ timeOffset + aPositiveOffset.! !
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 19:51:18' prior: 50918985!
skipAhead: aPositiveTimeOffset

	timeOffset _ timeOffset + aPositiveTimeOffset.! !

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 19:51:25'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:51:25'!
FAILURE!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 19:51:25'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:00:07' prior: 50918637!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!classDefinition: #CartInTimeXXX category: 'TusLibros' stamp: 'MF 11/8/2021 20:00:51'!
Object subclass: #CartInTimeXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:00:48' prior: 50917884!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId put: (CartInTimeXXX for: (Cart acceptingItemsOf: catalog) at: stopwatch now).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:01:00'!
ERROR!
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:01:27' prior: 50918991!
skipAhead: aPositiveTimeOffset

	timeOffset _ timeOffset + aPositiveTimeOffset.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:01:27'!
ERROR!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:01:27'!
ERROR!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:01:27'!
ERROR!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:01:27'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:01:27'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:01:27'!
ERROR!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:01:29'!
ERROR!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:01:43'!
ERROR!
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:01:50' prior: 50918937!
now

	^self globalClock next: timeOffset .! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:01:52'!
ERROR!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:01:52'!
ERROR!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:01:52'!
ERROR!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:01:52'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:01:52'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:01:52'!
ERROR!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:01:54'!
ERROR!
!Stopwatch methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:02:05' prior: 50919110!
now

	^self globalClock next: timeOffset .! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:02:11'!
ERROR!
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/8/2021 20:02:18'!
for: aCart at: aGregorianDateTime 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart at: aGregorianDateTime ! !
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/8/2021 20:02:35' prior: 50919151!
for: aCart at: aDateTime 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeFor: aCart at: aDateTime ! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:02:36'!
ERROR!

!classDefinition: #CartInTimeXXX category: 'TusLibros' stamp: 'MF 11/8/2021 20:02:42'!
Object subclass: #CartInTimeXXX
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartInTimeXXX category: 'TusLibros' stamp: 'MF 11/8/2021 20:02:43'!
Object subclass: #CartInTimeXXX
	instanceVariableNames: 'cart dateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInTimeXXX methodsFor: 'initialization' stamp: 'MF 11/8/2021 20:02:43'!
initializeFor: aCart at: aDateTime 
	self shouldBeImplemented.
	cart := aCart.
	dateTime := aDateTime.! !
!CartInTimeXXX methodsFor: 'initialization' stamp: 'MF 11/8/2021 20:02:47' prior: 50919185!
initializeFor: aCart at: aDateTime 
	
	cart := aCart.
	dateTime := aDateTime.! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:02:48'!
ERROR!
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/8/2021 20:03:10' prior: 50919161!
for: aCart at: aDateTime 
	
	^self new initializeFor: aCart at: aDateTime ! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:03:33' prior: 50917862!
cartWithId: aCartId

	^ (currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ]) cart! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:03:35' prior: 50919207!
cartWithId: aCartId

	^ (currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ]) cart.! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:03:37'!
ERROR!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:03:42'!
cart
	self shouldBeImplemented.
	^cart! !
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:03:50' prior: 50919223!
cart

	^cart! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:03:52'!
FAILURE!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:06:18' prior: 50919214!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: stopwatch now) ifFalse: [ self signalCartIdIsInvalid ].
	
	^cartWrapperXXX cart.! !

!classDefinition: #CartInTimeXXX category: 'TusLibros' stamp: 'MF 11/8/2021 20:07:57'!
Object subclass: #CartInTimeXXX
	instanceVariableNames: 'cart timeLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:07:57' prior: 50919192!
initializeFor: aCart at: aDateTime 
	
	cart := aCart.
	timeLastUsed := aDateTime.! !
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:08:25'!
stillValidAt: aDateTime

	^aDateTime < timeLastUsed next: 30*minute.! !
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:09:07' prior: 50919258!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed next: 30*minute).! !

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:18'!
PASSED!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:09:23' prior: 50919264!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed next: 29*minute).! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:09:24'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:25'!
PASSED!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:09:31' prior: 50919299!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed).! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:09:32'!
ERROR!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:09:32'!
ERROR!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:09:32'!
ERROR!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:09:32'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:32'!
PASSED!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:09:41' prior: 50919334!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed next: 26*minute).! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:09:42'!
PASSED!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:09:59' prior: 50919368!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed next: 31*minute).! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:10:01'!
FAILURE!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:10:38' prior: 50919403!
stillValidAt: aDateTime

	^aDateTime < (timeLastUsed next: 30*minute).! !

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:10:39'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:10:40'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:10:40'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:10:40'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:11:11' prior: 50919029!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:11:16' prior: 50919446!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:11:20'!
test12

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:11:21'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:11:30' prior: 50919493!
test12

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:12:21'!
test13

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: 1234 with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:12:39'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39'!
validUserId

	^ 1234! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918607!
test09

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface listPurchasesOf: self validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918553!
test08

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: self validUserId with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50919550!
test12

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: self validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50919575!
test13

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: self validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918754!
test01

	| cartContents cartId interface |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: self validUserId with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918493!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: self validUserId with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918621!
test02

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface createCartFor: self validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918514!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: self validUserId with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50918538!
test03

	| cartContents cartId interface product |
	interface _ self restInterface.
	cartId _ interface createCartFor: self validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:39' prior: 50919471!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: self validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:16:58'!
validUserId

	^ 1234! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:11' prior: 50919715!
test01

	| cartContents cartId interface |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:15' prior: 50919748!
test02

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface createCartFor: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:20' prior: 50919786!
test03

	| cartContents cartId interface product |
	interface _ self restInterface.
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:25' prior: 50919762!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:36' prior: 50919653!
test08

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self assert: purchases isEmpty.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:41' prior: 50919639!
test09

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:46' prior: 50919726!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:52' prior: 50919801!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:56' prior: 50919662!
test12

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:17:59' prior: 50919688!
test13

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #validUserId stamp: 'MF 11/8/2021 20:18:15'!
validUserId

	^ 1234!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:18:16'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:18:18'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:18:38' prior: 50919895!
test08

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	
	self assert: purchases isEmpty.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:18:43' prior: 50919920!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: 'Username' with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:18:47' prior: 50919942!
test11

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:18:49' prior: 50919966!
test12

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:18:53' prior: 50919992!
test13

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:23:03' prior: 50920069!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:25:17'!
test14

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 25*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	stopwatch skipAhead: 25*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:25:19'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:28:15' prior: 50920191!
test14

	| interface cartId stopwatch |
	stopwatch _ Stopwatch new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	stopwatch skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:28:16'!
ERROR!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:28:31'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:29:01' prior: 50919234!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: stopwatch now) ifFalse: [ self signalCartIdIsInvalid ].
	cartWrapperXXX touch: stopwatch now.
	
	^cartWrapperXXX cart.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:29:04'!
ERROR!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:29:04'!
ERROR!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:29:04'!
ERROR!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:29:04'!
ERROR!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:29:04'!
PASSED!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:29:04'!
ERROR!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:29:06'!
ERROR!
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:29:11'!
touch: aGregorianDateTime 
	self shouldBeImplemented.! !
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/8/2021 20:29:22' prior: 50920294!
touch: aDateTime 
	
	timeLastUsed _ aDateTime.! !

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:29:25'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:29:27'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/8/2021 20:30:19'!
PASSED!

----SNAPSHOT----(8 November 2021 20:30:58) CuisUniversity-4913.image priorSource: 18761947!

----QUIT----(9 November 2021 00:08:52) CuisUniversity-4913.image priorSource: 18839143!

----STARTUP---- (9 November 2021 16:10:11) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!


!classRenamed: #Stopwatch as: #Clock stamp: 'MF 11/9/2021 16:10:27'!
Smalltalk renameClassNamed: #Stopwatch as: #Clock!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:27' prior: 50920217!
test14

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	stopwatch skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:27' prior: 50920091!
test11

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:27' prior: 50918841!
stopwatch

	^Clock new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:27' prior: 50920141!
test13

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:27' prior: 50920115!
test12

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withStopwatch: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'MF 11/9/2021 16:10:50'!
Object subclass: #RestInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId salesBook merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:50' prior: 50918812!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aStopwatch    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aStopwatch.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:50' prior: 50920246!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: clock now) ifFalse: [ self signalCartIdIsInvalid ].
	cartWrapperXXX touch: clock now.
	
	^cartWrapperXXX cart.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:10:50' prior: 50919059!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId put: (CartInTimeXXX for: (Cart acceptingItemsOf: catalog) at: clock now).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !
!RestInterface class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 16:11:36' prior: 50918778!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock.! !
!RestInterface methodsFor: 'initialization' stamp: 'MF 11/9/2021 16:11:40' prior: 50920504!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.! !
!RestInterface methodsFor: 'initialization' stamp: 'MF 11/9/2021 16:11:47'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:47' prior: 50920543!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock.! !

!methodRemoval: RestInterface #initializeAuthenticatingWith:withCatalog:withMP:withStopwatch: stamp: 'MF 11/9/2021 16:11:47'!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.!
!RestInterface class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 16:11:58'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50918846!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withClock: testObjectsFactory stopwatch.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50920412!
test11

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50920388!
test14

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	stopwatch skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50920440!
test13

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50920468!
test12

	| interface cartId stopwatch |
	stopwatch _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: stopwatch.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	stopwatch skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:11:58' prior: 50918885!
notAuthenticatingRestInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator 
					withClock: testObjectsFactory stopwatch.! !

!methodRemoval: RestInterface class #authenticatingWith:withCatalog:withMP:withStopwatch: stamp: 'MF 11/9/2021 16:11:58'!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withStopwatch: aClock   
	
	^self new initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock.!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:12:04'!
clock

	^Clock new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:12:04' prior: 50920732!
notAuthenticatingRestInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: false) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator 
					withClock: testObjectsFactory clock.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 16:12:04' prior: 50920619!
restInterface

	^ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
					withCatalog: testObjectsFactory defaultCatalog 
					withMP: testObjectsFactory validMerchantProcessorSimulator
					withClock: testObjectsFactory clock.! !

!methodRemoval: StoreTestObjectsFactory #stopwatch stamp: 'MF 11/9/2021 16:12:04'!
stopwatch

	^Clock new.!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test01 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test02 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test03 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test04 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test05 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test06 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test07 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test08 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test09 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test10 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test11 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test12 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test13 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!

!testRun: #RestInterfaceTest #test14 stamp: 'MF 11/9/2021 16:12:09'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:26:33' prior: 50920655!
test14

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	clock skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:26:39' prior: 50920679!
test13

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:26:43' prior: 50920706!
test12

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:26:47' prior: 50920631!
test11

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:28:43'!
test01ListOfEmptyCartIsEmpty

	| cartContents cartId interface |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!methodRemoval: RestInterfaceTest #test01 stamp: 'MF 11/9/2021 17:28:43'!
test01

	| cartContents cartId interface |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents isEmpty.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:30:10'!
test02CantCreateCartWithInvalidCredentials

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface createCartFor: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test02 stamp: 'MF 11/9/2021 17:30:10'!
test02

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface createCartFor: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:30:37'!
test03ListOfCartWithAnItemIncludesThatItem

	| cartContents cartId interface product |
	interface _ self restInterface.
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.! !

!methodRemoval: RestInterfaceTest #test03 stamp: 'MF 11/9/2021 17:30:37'!
test03

	| cartContents cartId interface product |
	interface _ self restInterface.
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId product: product withOccurrences: 1.
	
	cartContents _ interface listCart: cartId.
	
	self assert: cartContents includes: product.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:30:50'!
test04ListingDifferentCartsReturnsDifferentResults

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !

!methodRemoval: RestInterfaceTest #test04 stamp: 'MF 11/9/2021 17:30:50'!
test04

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:30:59'!
test05CantListWithAnInvalidCartId

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test05 stamp: 'MF 11/9/2021 17:30:59'!
test05

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface listCart: invalidCartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:31:11'!
test06CantAddToCartWithInvalidCartId

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test06 stamp: 'MF 11/9/2021 17:31:11'!
test06

	| interface invalidCartId |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	
	self
		should: [ interface addToCart: invalidCartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:31:31'!
test07CantCheckoutCartWithInvalidCartId

	| interface invalidCartId creditCardNumber |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test07 stamp: 'MF 11/9/2021 17:31:31'!
test07

	| interface invalidCartId creditCardNumber |
	interface _ self restInterface.
	
	invalidCartId _ 1.
	creditCardNumber _ testObjectsFactory validCCNumber.
	
	self
		should: [ interface 
					checkOutCart: invalidCartId 
					with: creditCardNumber
					of: 'Lean' 
					expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:31:52'!
test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	
	self assert: purchases isEmpty.
	
	! !

!methodRemoval: RestInterfaceTest #test08 stamp: 'MF 11/9/2021 17:31:52'!
test08

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	
	self assert: purchases isEmpty.
	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:32:05'!
test09CantListPurchasesWithInvalidCredentials

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test09 stamp: 'MF 11/9/2021 17:32:05'!
test09

	| interface |
	interface _ self notAuthenticatingRestInterface.
	
	self
		should: [ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface usernameOrPasswordIsInvalidErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:33:16'!
test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	! !

!methodRemoval: RestInterfaceTest #test10 stamp: 'MF 11/9/2021 17:33:16'!
test10

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: 30 equals: purchases first total.
	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:33:29'!
test11CantListAnExpiredCart

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test11 stamp: 'MF 11/9/2021 17:33:29'!
test11

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface listCart: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:33:53'!
test12CantAddToAnExpiredCart

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test12 stamp: 'MF 11/9/2021 17:33:53'!
test12

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface 
					addToCart: cartId 
					product: testObjectsFactory itemSellByTheStore 
					withOccurrences: 1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:33:59'!
test13CantCheckoutAnExpiredCart

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !

!methodRemoval: RestInterfaceTest #test13 stamp: 'MF 11/9/2021 17:33:59'!
test13

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ interface checkOutCart: cartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:34:27'!
test14ExpireTimeOfCartIsRefreshedAfterUse

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	clock skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.! !

!methodRemoval: RestInterfaceTest #test14 stamp: 'MF 11/9/2021 17:34:27'!
test14

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 29*minute.
	interface addToCart: cartId product: testObjectsFactory itemSellByTheStore withOccurrences: 1.
	clock skipAhead: 1*minute. 	
	
	self assert: (interface listCart: cartId) includes: testObjectsFactory itemSellByTheStore.!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:37:43' prior: 50920519!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: clock now) ifFalse: [ self signalAndDeleteInvalidCart ].
	cartWrapperXXX touch: clock now.
	
	^cartWrapperXXX cart.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:37:59' prior: 50921434!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: clock now) ifFalse: [ self signalAndDeleteInvalidCart: aCartId ].
	cartWrapperXXX touch: clock now.
	
	^cartWrapperXXX cart.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:38:57'!
signalAndDeleteInvalidCart: aCartId

	currentCarts removeKey: aCartId.
	self signalCartIdIsInvalid! !

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:39:05'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:46:49'!
assertCantDoOnAnExpiredCart: aBlock

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ aBlock value: interface value: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ]! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:47:23' prior: 50921240!
test11CantListAnExpiredCart

	self assertCantDoOnAnExpiredCart: [ :anInterface :aCartId | anInterface listCart: aCartId ].! !

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:47:23'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:47:23'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:48:33' prior: 50921285!
test12CantAddToAnExpiredCart

	self assertCantDoOnAnExpiredCart: [  
		:anInterface :aCartId | anInterface addToCart: aCartId 
								product: testObjectsFactory itemSellByTheStore 
								withOccurrences: 1 ].! !

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:48:34'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:48:34'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:49:14' prior: 50921335!
test13CantCheckoutAnExpiredCart
	
	self assertCantDoOnAnExpiredCart: [ :anInterface :aCartId |
		 anInterface checkOutCart: aCartId 
				with: testObjectsFactory validCCNumber 
				of: 'Owner' 
				expiringOn: testObjectsFactory notExpiredMonthOfYear ]! !

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:50:01'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:50:01'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:51:12' prior: 50921516!
assertCantDoOnAnExpiredCart: aBlock

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ aBlock value: interface value: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ].
			
	clock goBack: 30*minute.
	self 
		should: [ aBlock value: interface value: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ].! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:51:13'!
ERROR!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:51:13'!
ERROR!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:51:13'!
ERROR!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:51:13'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:51:15'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:51:19'!
goBack: aSimpleMeasure 
	self shouldBeImplemented.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:51:42' prior: 50919073!
skipAhead: anAmountOfTime

	timeOffset _ timeOffset + anAmountOfTime.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:51:58' prior: 50921808!
goBack: anAmountOfTime 
	
	timeOffset _ timeOffset - anAmountOfTime.! !

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:52:00'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:52:02'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:52:02'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:54:37' prior: 50921446!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: clock now) ifFalse: [ self signalCartIdIsInvalid ].
	cartWrapperXXX touch: clock now.
	
	^cartWrapperXXX cart.! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:54:38'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:54:38'!
FAILURE!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:54:38'!
FAILURE!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:54:38'!
FAILURE!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:54:38'!
PASSED!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:37:59' prior: 50921877!
cartWithId: aCartId

	| cartWrapperXXX | 
	cartWrapperXXX _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartWrapperXXX stillValidAt: clock now) ifFalse: [ self signalAndDeleteInvalidCart: aCartId ].
	cartWrapperXXX touch: clock now.
	
	^cartWrapperXXX cart.! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:56:26'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:56:26'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 17:59:13' prior: 50921725!
assertCantDoOnAnExpiredCart: aBlock

	| interface cartId clock |
	clock _ Clock new.
	interface _ RestInterface authenticatingWith: (AuthenticatingSystemSimulator with: true) 
				withCatalog: testObjectsFactory defaultCatalog 
				withMP: testObjectsFactory validMerchantProcessorSimulator
				withClock: clock.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'. 
	clock skipAhead: 30*minute .
	
	self
		should: [ aBlock value: interface value: cartId ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: 
			[ :anError | 
				self assert: anError messageText equals: RestInterface cartIdDoesNotExistErrorMessage ].! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 17:59:21'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 17:59:21'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:01:25'!
test15

	| interface product cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: 2345 with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:04:13'!
anotherValidUserId

	^ 2345! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:04:21' prior: 50922072!
test15

	| interface product cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:04:33' prior: 50921003!
test04ListingDifferentCartsReturnsDifferentResults

	| interface product cart1Contents cart2Contents cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	cart1Contents _ interface listCart: cartId1.
	cart2Contents _ interface listCart: cartId2.
	
	self assert: 1 equals: (cart1Contents occurrencesOf: product).
	self assert: 2 equals: (cart2Contents occurrencesOf: product).! !

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 18:04:34'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 18:04:34'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:05:11' prior: 50922093!
test15

	| interface product cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	interface 
		checkOutCart: cartId1 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.
	
	interface 
		checkOutCart: cartId2
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:06:37'!
checkoutOn: cartId1 cartIdentifiedAs: interface

	^ interface 
		checkOutCart: cartId1 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:06:37' prior: 50922193!
test15

	| interface product cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: cartId1 cartIdentifiedAs: interface.
	
	interface 
		checkOutCart: cartId2
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:06:55' prior: 50922220!
checkoutOn: anInterface cartIdentifiedAs: interface

	^ interface 
		checkOutCart: anInterface 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:06:59' prior: 50922254!
checkoutOn: anInterface cartIdentifiedAs: aCartId

	^ aCartId 
		checkOutCart: anInterface 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:07:06' prior: 50922264!
checkoutOn: anInterface cartIdentifiedAs: aCartId

	^ anInterface 
		checkOutCart: aCartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:07:24' prior: 50922230!
test15

	| interface product cartId1 cartId2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:07:53' prior: 50922284!
test15

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:09:03' prior: 50921194!
test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 3) equals: purchases first total.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:09:28' prior: 50922305!
test15

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 occurrencesOf: product).
	self assert: 2 equals: (purchases2 occurrencesOf: product)! !

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 18:09:29'!
FAILURE!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 18:10:37'!
FAILURE!
!RestInterface methodsFor: 'initialization' stamp: 'MF 11/9/2021 18:10:51' prior: 50920568!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBook _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:14:17'!
userIdOfCartIdentifiedAs: aCartId

	^(currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ]) userId.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:14:23' prior: 50917868!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier |
	cartToCheckout _ self cartWithId: aCartId.
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: (salesBook at: (self userIdOfCartIdentifiedAs: aCartId)) .
				
	cashier checkOut.
	! !
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 18:15:20'!
for: aCart atPointInTime: aDateTime 
	
	^self new initializeFor: aCart at: aDateTime ! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:15:20' prior: 50920531!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId put: (CartInTimeXXX for: (Cart acceptingItemsOf: catalog) atPointInTime: clock now).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !

!methodRemoval: CartInTimeXXX class #for:at: stamp: 'MF 11/9/2021 18:15:20'!
for: aCart at: aDateTime 
	
	^self new initializeFor: aCart at: aDateTime !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:15:52' prior: 50922438!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId 
			     put: (CartInTimeXXX 
						for: (Cart acceptingItemsOf: catalog) 
						atPointInTime: clock now).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !
!CartInTimeXXX methodsFor: 'initialization' stamp: 'MF 11/9/2021 18:16:38'!
initializeFor: aCart atPointInTime: aDateTime 
	
	cart := aCart.
	timeLastUsed := aDateTime.! !
!CartInTimeXXX class methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:16:38' prior: 50922432!
for: aCart atPointInTime: aDateTime 
	
	^self new initializeFor: aCart atPointInTime: aDateTime ! !

!methodRemoval: CartInTimeXXX #initializeFor:at: stamp: 'MF 11/9/2021 18:16:38'!
initializeFor: aCart at: aDateTime 
	
	cart := aCart.
	timeLastUsed := aDateTime.!
!CartInTimeXXX methodsFor: 'initialization' stamp: 'MF 11/9/2021 18:17:01'!
initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: aUserId  
	
	cart := aCart.
	timeLastUsed := aDateTime.! !
!CartInTimeXXX class methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:17:01' prior: 50922474!
for: aCart atPointInTime: aDateTime 
	
	^self new initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: aUserId ! !

!methodRemoval: CartInTimeXXX #initializeFor:atPointInTime: stamp: 'MF 11/9/2021 18:17:01'!
initializeFor: aCart atPointInTime: aDateTime 
	
	cart := aCart.
	timeLastUsed := aDateTime.!
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 18:17:03'!
for: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId  
	
	^self new initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: aUserId ! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:17:03' prior: 50922455!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aPassword with: aUserId.
	
	currentCarts at: newId 
			     put: (CartInTimeXXX 
						for: (Cart acceptingItemsOf: catalog) 
						atPointInTime: clock now belongingToUserIdentifiedAs: aUserId).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !

!methodRemoval: CartInTimeXXX class #for:atPointInTime: stamp: 'MF 11/9/2021 18:17:03'!
for: aCart atPointInTime: aDateTime 
	
	^self new initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: aUserId !
!CartInTimeXXX class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 18:17:09' prior: 50922506!
for: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId  
	
	^self new initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId ! !

!classDefinition: #CartInTimeXXX category: 'TusLibros' stamp: 'MF 11/9/2021 18:17:36'!
Object subclass: #CartInTimeXXX
	instanceVariableNames: 'cart timeLastUsed userId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartInTimeXXX methodsFor: 'initialization' stamp: 'MF 11/9/2021 18:17:35' prior: 50922485!
initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId  
	
	cart := aCart.
	timeLastUsed := aDateTime.
	userId := anUserId.! !
!CartInTimeXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:17:47'!
userId

	^userId.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:18:54' prior: 50922515!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aUserId with: aPassword.
	
	currentCarts at: newId 
			     put: (CartInTimeXXX 
						for: (Cart acceptingItemsOf: catalog) 
						atPointInTime: clock now belongingToUserIdentifiedAs: aUserId).
	
	cartId _ newId.	
	newId _ newId + 1.
	^cartId.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:19:27' prior: 50917854!
authenticate: aUserId with: aPassword

	^ (authenticatingSystem authenticate: aUserId with: aPassword) ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:23:59' prior: 50922578!
authenticate: aUserId with: aPassword

	^ (authenticatingSystem authenticate: aUserId with: aPassword) 
		ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:24:08' prior: 50922586!
authenticate: aUserId with: aPassword

	^ (authenticatingSystem authenticate: aUserId with: aPassword) 
		ifFalse: [ self signalUsernameOrPasswordIsInvalid ]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:24:51' prior: 50922415!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier salesBookOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	salesBookOfUser _ self salesBookOf: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBookOfUser .
				
	cashier checkOut.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:25:06' prior: 50922604!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier salesBookOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	salesBookOfUser _ self salesBookOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: salesBookOfUser .
				
	cashier checkOut.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:25:44'!
salesBookOfUserIdentifiedAs: anUserId

	^salesBook at: anUserId 
		ifAbsent: [ salesBook at: anUserId put: OrderedCollection new ].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:27:00' prior: 50917899!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^(salesBook at: anUserId) copy.
	
	! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'MF 11/9/2021 18:41:01'!
Object subclass: #RestInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId salesBooks merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:41:01' prior: 50922395!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	salesBooks _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:41:01' prior: 50922650!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^(salesBooks at: anUserId) copy.
	
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:41:01' prior: 50922642!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: OrderedCollection new ].! !

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'MF 11/9/2021 18:41:12'!
Object subclass: #SalesBook
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:41:09' prior: 50922689!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: SalesBook new ].! !
!SalesBook methodsFor: 'no messages' stamp: 'MF 11/9/2021 18:41:18'!
total! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:41:31'!
items! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 18:47:27' prior: 50922703!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: OrderedCollection new ].! !

!classRemoval: #SalesBook stamp: 'MF 11/9/2021 18:47:31'!
Object subclass: #SalesBook
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(9 November 2021 19:56:16) CuisUniversity-4913.image priorSource: 18839236!
!Sale class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 22:09:27'!
ofTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:09:27' prior: 50917562!
createSale

	^ Sale ofTotal: total
! !

!methodRemoval: Sale class #of: stamp: 'MF 11/9/2021 22:09:27'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale methodsFor: 'initialization' stamp: 'MF 11/9/2021 22:23:40'!
initializeTotal: aTotal ofProducts: productsSold 

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:23:40' prior: 50922733!
ofTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold ! !

!methodRemoval: Sale #initializeTotal: stamp: 'MF 11/9/2021 22:23:40'!
initializeTotal: aTotal

	total := aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 22:23:46'!
ofTotal: aTotal ofProducts: productsSold 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:23:46' prior: 50922740!
createSale

	^ Sale ofTotal: total ofProducts: cart contents
! !

!methodRemoval: Sale class #ofTotal: stamp: 'MF 11/9/2021 22:23:46'!
ofTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold !
!Sale class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 22:24:37'!
of: aTotal ofProducts: productsSold 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:24:37' prior: 50922773!
createSale

	^ Sale of: total ofProducts: cart contents
! !

!methodRemoval: Sale class #ofTotal:ofProducts: stamp: 'MF 11/9/2021 22:24:37'!
ofTotal: aTotal ofProducts: productsSold 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold !
!Sale class methodsFor: 'instance creation' stamp: 'MF 11/9/2021 22:24:50'!
of: aTotal withProducts: productsSold 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:24:50' prior: 50922792!
createSale

	^ Sale of: total withProducts: cart contents
! !

!methodRemoval: Sale class #of:ofProducts: stamp: 'MF 11/9/2021 22:24:50'!
of: aTotal ofProducts: productsSold 

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ofProducts: productsSold !

!classDefinition: #Sale category: 'TusLibros' stamp: 'MF 11/9/2021 22:27:07'!
Object subclass: #Sale
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MF 11/9/2021 22:27:06' prior: 50922749!
initializeTotal: aTotal ofProducts: productsSold 

	total := aTotal. 
	products _ productsSold.! !
!Sale methodsFor: 'total' stamp: 'MF 11/9/2021 22:30:07'!
products

	^products.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:30:36' prior: 50922681!
listPurchasesOf: anUserId with: aPassword

	| xxx |
	self authenticate: anUserId with: aPassword. 
	
	xxx _ Bag new.
	(salesBooks at: anUserId) do: [ :aSale | xxx addAll: aSale products ].
	^xxx.
	
	! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:30:40'!
ERROR!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:30:40'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:30:40'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:30:59'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:31:39' prior: 50922840!
listPurchasesOf: anUserId with: aPassword

	| xxx |
	self authenticate: anUserId with: aPassword. 
	
	xxx _ Bag new.
	(self salesBookOfUserIdentifiedAs: anUserId) do: [ :aSale | xxx addAll: aSale products ].
	^xxx.
	
	! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:31:40'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:31:40'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:31:40'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:32:25' prior: 50922333!
test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self deny: purchases isEmpty.
	self assert: (testObjectsFactory itemSellByTheStorePrice * 3) equals: (interface purchasesTotalOf: testObjectsFactory validUserId with: 'password') .
	
	! !

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:32:27'!
ERROR!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:32:31'!
purchasesTotalOf: aSmallInteger with: aString 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:33:36' prior: 50923002!
purchasesTotalOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword.
	
	^(self salesBookOfUserIdentifiedAs: anUserId) sum: [ :aSale | aSale total ].
	! !

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:33:37'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:33:39'!
PASSED!

Object subclass: #SalesBookXXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesBookXXXX category: 'TusLibros' stamp: 'MF 11/9/2021 22:38:43'!
Object subclass: #SalesBookXXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesBookXXXX category: 'TusLibros' stamp: 'MF 11/9/2021 22:38:58'!
Object subclass: #SalesBookXXXX
	instanceVariableNames: 'sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesBookXXXX methodsFor: 'no messages' stamp: 'MF 11/9/2021 22:38:57' overrides: 16896425!
initialize

	sales _ OrderedCollection new! !
!SalesBookXXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:43:09'!
products

	| bagOfProducts |
	
	bagOfProducts _ Bag new.
	sales do: [ :aSale | bagOfProducts addAll: aSale products ].
	^bagOfProducts ! !
!SalesBookXXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:44:37'!
total

	sales sum: [ :aSale | aSale total ].! !
!RestInterface methodsFor: 'accessing' stamp: 'MF 11/9/2021 22:46:37' prior: 50921938!
cartWithId: aCartId

	| cartOfCostumer | 
	cartOfCostumer _ currentCarts at: aCartId ifAbsent: [ self signalCartIdIsInvalid ].
	
	(cartOfCostumer stillValidAt: clock now) ifFalse: [ self signalAndDeleteInvalidCart: aCartId ].
	cartOfCostumer touch: clock now.
	
	^cartOfCostumer cart.! !
!RestInterface methodsFor: 'accessing' stamp: 'MF 11/9/2021 22:47:12' prior: 50922717!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: SalesBookXXXX new ].! !
!SalesBookXXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:47:19'!
add: aSale

	sales add: aSale.! !
!RestInterface methodsFor: 'queries' stamp: 'MF 11/9/2021 22:47:48' prior: 50922905!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^(self salesBookOfUserIdentifiedAs: anUserId) products.
	
	! !
!RestInterface methodsFor: 'queries' stamp: 'MF 11/9/2021 22:47:57' prior: 50923008!
purchasesTotalOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword.
	
	^(self salesBookOfUserIdentifiedAs: anUserId) total.
	! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:47:58'!
FAILURE!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:47:58'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:47:58'!
FAILURE!
!SalesBookXXXX methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:48:05' prior: 50923101!
total

	^sales sum: [ :aSale | aSale total ].! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:48:08'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:48:08'!
PASSED!
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:48:29' prior: 50922564!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aUserId with: aPassword.
	
	currentCarts at: newId 
			     put: (CartInTimeXXX 
						for: (Cart acceptingItemsOf: catalog) 
						atPointInTime: clock now belongingToUserIdentifiedAs: aUserId).
	
	cartId _ self generateNewId.
	^cartId.! !
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:49:02'!
generateNewId

	| currentId |
	currentId _ newId.
	newId _ newId + 1.
	^currentId .! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:49:02'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:49:03'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:49:03'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:49:03'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:49:03'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:49:03'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:49:03'!
PASSED!
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:49:38'!
createCartForCustomerIdentifiedAs: aUserId

	^ CartInTimeXXX 
						for: (Cart acceptingItemsOf: catalog) 
						atPointInTime: clock now belongingToUserIdentifiedAs: aUserId! !
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:49:38' prior: 50923257!
createCartFor: aUserId with: aPassword 
	
	| cartId |
	self authenticate: aUserId with: aPassword.
	
	currentCarts at: newId 
			     put: (self createCartForCustomerIdentifiedAs: aUserId).
	
	cartId _ self generateNewId.
	^cartId.! !
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:49:50' prior: 50923327!
createCartForCustomerIdentifiedAs: aUserId

	^ CartInTimeXXX for: (Cart acceptingItemsOf: catalog) 
				       atPointInTime: clock now belongingToUserIdentifiedAs: aUserId! !
!RestInterface methodsFor: 'cart creation' stamp: 'MF 11/9/2021 22:49:55' prior: 50923347!
createCartForCustomerIdentifiedAs: aUserId

	^ CartInTimeXXX for: (Cart acceptingItemsOf: catalog) 
				       atPointInTime: clock now 
				       belongingToUserIdentifiedAs: aUserId! !

!classRenamed: #CartInTimeXXX as: #CartOfCustomer stamp: 'MF 11/9/2021 22:51:33'!
Smalltalk renameClassNamed: #CartInTimeXXX as: #CartOfCustomer!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:51:33' prior: 50923356!
createCartForCustomerIdentifiedAs: aUserId

	^ CartOfCustomer for: (Cart acceptingItemsOf: catalog) 
				       atPointInTime: clock now 
				       belongingToUserIdentifiedAs: aUserId! !

!classRenamed: #SalesBookXXXX as: #SalesBook stamp: 'MF 11/9/2021 22:51:48'!
Smalltalk renameClassNamed: #SalesBookXXXX as: #SalesBook!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:51:48' prior: 50923118!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: SalesBook new ].! !

!classRenamed: #SalesBook as: #CustomerSalesBook stamp: 'MF 11/9/2021 22:51:58'!
Smalltalk renameClassNamed: #SalesBook as: #CustomerSalesBook!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:51:58' prior: 50923384!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: CustomerSalesBook new ].! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:55:11'!
test16

	| interface purchases cartId product anotherCartId |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	anotherCartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	interface addToCart: anotherCartId product: product withOccurrences: 3.
	interface 
		checkOutCart: anotherCartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 6) equals: purchases total.
	self assert: 6 equals: (purchases products occurrencesOf: product).
	
	! !

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:55:15'!
ERROR!
!RestInterface methodsFor: 'queries' stamp: 'MF 11/9/2021 22:55:33' prior: 50923129!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^self salesBookOfUserIdentifiedAs: anUserId.
	
	! !
!RestInterface methodsFor: 'queries' stamp: 'MF 11/9/2021 22:55:37' prior: 50923441!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^self salesBookOfUserIdentifiedAs: anUserId.! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:55:37'!
ERROR!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:55:37'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:55:37'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:55:37'!
ERROR!

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:55:37'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:56:11' prior: 50921146!
test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty

	| interface purchases |
	interface _ self restInterface.
	
	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	
	self assert: purchases products isEmpty.
	
	! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:56:12'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:56:12'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:56:12'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:56:13'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:56:13'!
ERROR!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:56:13'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:56:44' prior: 50922971!
test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase

	| interface purchases cartId product |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 3) equals: purchases total.
	self assert: 3 equals: (purchases products occurrencesOf: product).
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:56:52' prior: 50922359!
test15

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 product occurrencesOf: product).
	self assert: 2 equals: (purchases2 product occurrencesOf: product)! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:56:53'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:56:53'!
ERROR!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:56:53'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:57:02' prior: 50923603!
test15

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 products occurrencesOf: product).
	self assert: 2 equals: (purchases2 products occurrencesOf: product)! !

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:57:02'!
PASSED!

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test15 stamp: 'MF 11/9/2021 22:57:05'!
PASSED!

!testRun: #RestInterfaceTest #test16 stamp: 'MF 11/9/2021 22:57:05'!
PASSED!
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/9/2021 22:57:35' prior: 50922623!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self salesBookOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !
!RestInterface methodsFor: 'accessing' stamp: 'MF 11/9/2021 22:57:41'!
purchasesOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: CustomerSalesBook new ].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:57:41' prior: 50923137!
purchasesTotalOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword.
	
	^(self purchasesOfUserIdentifiedAs: anUserId) total.
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:57:41' prior: 50923449!
listPurchasesOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword. 
	
	^self purchasesOfUserIdentifiedAs: anUserId.! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:57:41' prior: 50923781!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !

!methodRemoval: RestInterface #salesBookOfUserIdentifiedAs: stamp: 'MF 11/9/2021 22:57:41'!
salesBookOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: CustomerSalesBook new ].!

!classRenamed: #CustomerSalesBook as: #CustomerPurchaseHistory stamp: 'MF 11/9/2021 22:57:55'!
Smalltalk renameClassNamed: #CustomerSalesBook as: #CustomerPurchaseHistory!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:57:55' prior: 50923800!
purchasesOfUserIdentifiedAs: anUserId

	^salesBooks at: anUserId 
		ifAbsent: [ salesBooks at: anUserId put: CustomerPurchaseHistory new ].! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'MF 11/9/2021 22:58:09'!
Object subclass: #RestInterface
	instanceVariableNames: 'authenticatingSystem catalog currentCarts newId customerPurchases merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:58:09' prior: 50923856!
purchasesOfUserIdentifiedAs: anUserId

	^customerPurchases at: anUserId 
		ifAbsent: [ customerPurchases at: anUserId put: CustomerPurchaseHistory new ].! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'MF 11/9/2021 22:58:09' prior: 50922667!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock    
	
	authenticatingSystem := anAuthenticatingSystem.
	catalog := aCatalog.
	
	newId _ 1.
	currentCarts _ Dictionary new.
	customerPurchases _ Dictionary new.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.! !

!methodRemoval: RestInterface #purchasesTotalOf:with: stamp: 'MF 11/9/2021 22:58:23'!
purchasesTotalOf: anUserId with: aPassword

	self authenticate: anUserId with: aPassword.
	
	^(self purchasesOfUserIdentifiedAs: anUserId) total.
	!

----SNAPSHOT----(9 November 2021 23:03:50) CuisUniversity-4913.image priorSource: 18914528!

----QUIT----(9 November 2021 23:03:55) CuisUniversity-4913.image priorSource: 18952064!

----STARTUP---- (10 November 2021 22:41:14) as C:\Users\maxi\Desktop\TusLibros it3\CuisUniversity-4913.image!

!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/10/2021 22:46:32'!
test15PurchasesOfDifferentUsersAreDifferent

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 products occurrencesOf: product).
	self assert: 2 equals: (purchases2 products occurrencesOf: product)! !

!methodRemoval: RestInterfaceTest #test15 stamp: 'MF 11/10/2021 22:46:32'!
test15

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 products occurrencesOf: product).
	self assert: 2 equals: (purchases2 products occurrencesOf: product)!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/10/2021 22:47:02'!
test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 products occurrencesOf: product).
	self assert: 2 equals: (purchases2 products occurrencesOf: product)! !

!methodRemoval: RestInterfaceTest #test15PurchasesOfDifferentUsersAreDifferent stamp: 'MF 11/10/2021 22:47:02'!
test15PurchasesOfDifferentUsersAreDifferent

	| interface product cartId1 cartId2 purchases1 purchases2 |
	interface _ self restInterface.
	cartId1 _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	cartId2 _ interface createCartFor: testObjectsFactory anotherValidUserId with: 'Password2'.
	 
	product _ testObjectsFactory itemSellByTheStore.
	
	interface addToCart: cartId1 product: product withOccurrences: 1.
	interface addToCart: cartId2 product: product  withOccurrences: 2.
	
	self checkoutOn: interface cartIdentifiedAs: cartId1.
	self checkoutOn: interface cartIdentifiedAs: cartId2.
	
	purchases1 _ interface listPurchasesOf: testObjectsFactory validUserId with: 'Password'.
	purchases2 _ interface listPurchasesOf: testObjectsFactory anotherValidUserId with: 'Password'.
	
	self assert: 1 equals: (purchases1 products occurrencesOf: product).
	self assert: 2 equals: (purchases2 products occurrencesOf: product)!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MF 11/10/2021 22:47:24'!
test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts

	| interface purchases cartId product anotherCartId |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	anotherCartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	interface addToCart: anotherCartId product: product withOccurrences: 3.
	interface 
		checkOutCart: anotherCartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 6) equals: purchases total.
	self assert: 6 equals: (purchases products occurrencesOf: product).
	
	! !

!methodRemoval: RestInterfaceTest #test16 stamp: 'MF 11/10/2021 22:47:24'!
test16

	| interface purchases cartId product anotherCartId |
	interface _ self restInterface.
	
	cartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	product _ testObjectsFactory itemSellByTheStore.
	interface addToCart: cartId product: product withOccurrences: 3.
	interface 
		checkOutCart: cartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	anotherCartId _ interface createCartFor: testObjectsFactory validUserId with: 'Password'.
	interface addToCart: anotherCartId product: product withOccurrences: 3.
	interface 
		checkOutCart: anotherCartId 
		with: testObjectsFactory validCCNumber 
		of: 'Card Owner' 
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases _ interface listPurchasesOf: testObjectsFactory validUserId with: 'password'.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 6) equals: purchases total.
	self assert: 6 equals: (purchases products occurrencesOf: product).
	
	!

!methodRemoval: MerchantProcessorSimulator #totalDebited stamp: 'MF 11/10/2021 22:49:52'!
totalDebited!

!methodRemoval: MerchantProcessorSimulator #debitedCard stamp: 'MF 11/10/2021 22:49:53'!
debitedCard!

!methodRemoval: Clock #goBack: stamp: 'MF 11/10/2021 22:50:52'!
goBack: anAmountOfTime 
	
	timeOffset _ timeOffset - anAmountOfTime.!
!Behavior method!
initialize
	(today _ [
	(FixedGregorianDate
		cover: (23 to: 40)
		declaredAt: (23 to: 40)) today ] valueCoveringAll:
		{42 to: 46})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{103 to: 110} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(contents _ [
	(Bag
		cover: (74 to: 76)
		declaredAt: (74 to: 76)) new ] valueCoveringAll:
		{78 to: 80})
		cover: (62 to: 69)
		declaredAt: (62 to: 69).! !
!Behavior method!
isEmpty
	^ [
	(contents
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) isEmpty ] valueCoveringAll:
		{22 to: 28}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/10/2021 22:52:20'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(contents
		cover: (103 to: 110)
		declaredAt: (103 to: 110))
		add:
			(anItem
				cover: (117 to: 122)
				declaredAt: (20 to: 25))
		withOccurrences:
			(aQuantity
				cover: (141 to: 149)
				declaredAt: (6 to: 14)) ] valueCoveringAll:
		{112 to: 115. 124 to: 139}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/10/2021 22:52:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/10/2021 22:52:20'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/10/2021 22:52:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/10/2021 22:52:20'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(contents
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) includes:
		(anItem
			cover: (40 to: 45)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{30 to: 38}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/10/2021 22:52:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/10/2021 22:52:20'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(contents
		cover: (26 to: 33)
		declaredAt: (26 to: 33)) occurrencesOf:
		(anItem
			cover: (50 to: 55)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{35 to: 48}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/10/2021 22:52:20'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(self coverAll:
			{49 to: 52}) notExpiredMonthOfYear ] valueCoveringAll:
			{54 to: 74}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
notExpiredMonthOfYear
	^ [
	([
	(today
		cover: (28 to: 32)
		declaredAt: (28 to: 32)) next:
		([
		(1 coverAll:
			{40 to: 40}) *
			(month
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
			{41 to: 41}) ] valueCoveringAll:
		{34 to: 38}) monthOfYear ] valueCoveringAll:
		{49 to: 59}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
withBehaviour: aBlock
	^ [
	([
	(self coverAll:
		{26 to: 29}) new ] valueCoveringAll:
		{31 to: 33}) initializeWithBehaviour:
		(aBlock
			cover: (60 to: 65)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{35 to: 58}.! !
!Behavior method!
initializeWithBehaviour: aBlock
	(debitBehaviour _ aBlock
		cover: (52 to: 57)
		declaredAt: (26 to: 31))
		cover: (35 to: 48)
		declaredAt: (35 to: 48).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{109 to: 112}) assertIsNotEmpty:
		(aCart
			cover: (132 to: 136)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{114 to: 130}.
	[
	(self coverAll:
		{140 to: 143})
		assertIsNotExpired:
			(aCreditCard
				cover: (165 to: 175)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (181 to: 185)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{145 to: 163. 177 to: 179}.
	^ [
	([
	(self coverAll:
		{192 to: 195}) new ] valueCoveringAll:
		{197 to: 199})
		initializeToCheckout:
			(aCart
				cover: (223 to: 227)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (239 to: 249)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (261 to: 278)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (295 to: 304)
				declaredAt: (95 to: 104)) ] valueCoveringAll:
		{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) <
		(aDate
			cover: (38 to: 42)
			declaredAt: (14 to: 18)) ] valueCoveringAll:
		{36 to: 36}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	(cart _ aCart
		cover: (117 to: 121)
		declaredAt: (23 to: 27))
		cover: (109 to: 112)
		declaredAt: (109 to: 112).
	(creditCard _ aCreditCard
		cover: (139 to: 149)
		declaredAt: (39 to: 49))
		cover: (125 to: 134)
		declaredAt: (125 to: 134).
	(merchantProcessor _ aMerchantProcessor
		cover: (174 to: 191)
		declaredAt: (61 to: 78))
		cover: (153 to: 169)
		declaredAt: (153 to: 169).
	(salesBook _ aSalesBook
		cover: (208 to: 217)
		declaredAt: (95 to: 104))
		cover: (195 to: 203)
		declaredAt: (195 to: 203).! !
!Behavior method!
checkOut
	[
	(self coverAll:
		{12 to: 15}) calculateTotal ] valueCoveringAll:
		{17 to: 30}.
	[
	(self coverAll:
		{34 to: 37}) debitTotal ] valueCoveringAll:
		{39 to: 48}.
	[
	(self coverAll:
		{52 to: 55}) registerSale ] valueCoveringAll:
		{57 to: 68}.
	^ total
		cover: (75 to: 79)
		declaredAt: (75 to: 79).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(contents
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) sum: [ :anItem |
		[
		(catalog
			cover: (37 to: 43)
			declaredAt: (37 to: 43)) at:
			(anItem
				cover: (49 to: 54)
				declaredAt: (28 to: 33)) ] valueCoveringAll:
			{45 to: 47} ]] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	[
	(debitBehaviour
		cover: (37 to: 50)
		declaredAt: (37 to: 50))
		value:
			(anAmount
				cover: (59 to: 66)
				declaredAt: (8 to: 15))
		value:
			(aCreditCard
				cover: (75 to: 85)
				declaredAt: (23 to: 33)) ] valueCoveringAll:
		{52 to: 57. 68 to: 73}.! !
!Behavior method!
registerSale
	[
	(salesBook
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) add:
		([
		(self coverAll:
			{31 to: 34}) createSale ] valueCoveringAll:
			{36 to: 45}) ] valueCoveringAll:
		{26 to: 29}.! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			(total
				cover: (25 to: 29)
				declaredAt: (25 to: 29))
		withProducts:
			([
			(cart
				cover: (45 to: 48)
				declaredAt: (45 to: 48)) contents ] valueCoveringAll:
				{50 to: 57}) ] valueCoveringAll:
		{21 to: 23. 31 to: 43}.! !
!Behavior method!
contents
	^ [
	(contents
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) copy ] valueCoveringAll:
		{22 to: 25}.! !
!Behavior method!
of: aTotal withProducts: productsSold
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{88 to: 91}) new ] valueCoveringAll:
		{93 to: 95})
		initializeTotal:
			(aTotal
				cover: (114 to: 119)
				declaredAt: (5 to: 10))
		ofProducts:
			(productsSold
				cover: (133 to: 144)
				declaredAt: (26 to: 37)) ] valueCoveringAll:
		{97 to: 112. 121 to: 131}.! !
!Behavior method!
initializeTotal: aTotal ofProducts: productsSold
	(total _ aTotal
		cover: (62 to: 67)
		declaredAt: (18 to: 23))
		cover: (53 to: 57)
		declaredAt: (53 to: 57).
	(products _ productsSold
		cover: (83 to: 94)
		declaredAt: (37 to: 48))
		cover: (72 to: 79)
		declaredAt: (72 to: 79).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(self coverAll:
			{46 to: 49}) expiredMonthOfYear ] valueCoveringAll:
			{51 to: 68}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
expiredMonthOfYear
	^ [
	([
	(today
		cover: (25 to: 29)
		declaredAt: (25 to: 29)) previous:
		([
		(1 coverAll:
			{41 to: 41}) *
			(month
				cover: (43 to: 47)
				declaredAt: (43 to: 47)) ] valueCoveringAll:
			{42 to: 42}) ] valueCoveringAll:
		{31 to: 39}) monthOfYear ] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
with: aBooleanToReturnWhenAuthenticating
	^ [
	([
	(self coverAll:
		{46 to: 49}) new ] valueCoveringAll:
		{51 to: 53}) initializeWith:
		(aBooleanToReturnWhenAuthenticating
			cover: (71 to: 104)
			declaredAt: (7 to: 40)) ] valueCoveringAll:
		{55 to: 69}.! !
!Behavior method!
initializeWith: aBooleanToReturnWhenAuthenticating
	(booleanToReturn _ aBooleanToReturnWhenAuthenticating
		cover: (75 to: 108)
		declaredAt: (17 to: 50))
		cover: (56 to: 70)
		declaredAt: (56 to: 70).! !
!Behavior method!
validMerchantProcessorSimulator
	^ [
	(MerchantProcessorSimulator
		cover: (36 to: 61)
		declaredAt: (36 to: 61)) withBehaviour: [ :anAmount :aCreditCard |
		nil ]] valueCoveringAll:
		{63 to: 76}.! !
!Behavior method!
clock
	^ [
	(Clock
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) new ] valueCoveringAll:
		{16 to: 18}.! !
!Behavior method!
initialize
	(timeOffset _ 0 coverAll:
		{27 to: 27})
		cover: (14 to: 23)
		declaredAt: (14 to: 23).! !
!Behavior method!
authenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{118 to: 121}) new ] valueCoveringAll:
		{123 to: 125})
		initializeAuthenticatingWith:
			(anAuthenticatingSystem
				cover: (157 to: 178)
				declaredAt: (21 to: 42))
		withCatalog:
			(aCatalog
				cover: (193 to: 200)
				declaredAt: (57 to: 64))
		withMP:
			(aMerchantProcessor
				cover: (210 to: 227)
				declaredAt: (74 to: 91))
		withClock:
			(aClock
				cover: (240 to: 245)
				declaredAt: (104 to: 109)) ] valueCoveringAll:
		{127 to: 155. 180 to: 191. 202 to: 208. 229 to: 238}.! !
!Behavior method!
initializeAuthenticatingWith: anAuthenticatingSystem withCatalog: aCatalog withMP: aMerchantProcessor withClock: aClock
	(authenticatingSystem _ anAuthenticatingSystem
		cover: (152 to: 173)
		declaredAt: (31 to: 52))
		cover: (128 to: 147)
		declaredAt: (128 to: 147).
	(catalog _ aCatalog
		cover: (188 to: 195)
		declaredAt: (67 to: 74))
		cover: (177 to: 183)
		declaredAt: (177 to: 183).
	(newId _ 1 coverAll:
		{209 to: 209})
		cover: (201 to: 205)
		declaredAt: (201 to: 205).
	(currentCarts _ [
	(Dictionary
		cover: (228 to: 237)
		declaredAt: (228 to: 237)) new ] valueCoveringAll:
		{239 to: 241})
		cover: (213 to: 224)
		declaredAt: (213 to: 224).
	(customerPurchases _ [
	(Dictionary
		cover: (265 to: 274)
		declaredAt: (228 to: 237)) new ] valueCoveringAll:
		{276 to: 278})
		cover: (245 to: 261)
		declaredAt: (245 to: 261).
	(merchantProcessor _ aMerchantProcessor
		cover: (302 to: 319)
		declaredAt: (84 to: 101))
		cover: (282 to: 298)
		declaredAt: (282 to: 298).
	(clock _ aClock
		cover: (331 to: 336)
		declaredAt: (114 to: 119))
		cover: (323 to: 327)
		declaredAt: (323 to: 327).! !
!Behavior method!
validUserId
	^ 1234 coverAll:
		{17 to: 20}.! !
!Behavior method!
createCartFor: aUserId with: aPassword
	| cartId |
	[
	(self coverAll:
		{56 to: 59})
		authenticate:
			(aUserId
				cover: (75 to: 81)
				declaredAt: (16 to: 22))
		with:
			(aPassword
				cover: (89 to: 97)
				declaredAt: (30 to: 38)) ] valueCoveringAll:
		{61 to: 73. 83 to: 87}.
	[
	(currentCarts
		cover: (103 to: 114)
		declaredAt: (103 to: 114))
		at:
			(newId
				cover: (120 to: 124)
				declaredAt: (120 to: 124))
		put:
			([
			(self coverAll:
				{141 to: 144}) createCartForCustomerIdentifiedAs:
				(aUserId
					cover: (181 to: 187)
					declaredAt: (16 to: 22)) ] valueCoveringAll:
				{146 to: 179}) ] valueCoveringAll:
		{116 to: 118. 135 to: 138}.
	(cartId _ [
	(self coverAll:
		{203 to: 206}) generateNewId ] valueCoveringAll:
		{208 to: 220})
		cover: (194 to: 199)
		declaredAt: (46 to: 51).
	^ cartId
		cover: (225 to: 230)
		declaredAt: (46 to: 51).! !
!Behavior method!
authenticate: aUserId with: aPassword
	^ [
	([
	(authenticatingSystem
		cover: (44 to: 63)
		declaredAt: (44 to: 63))
		authenticate:
			(aUserId
				cover: (79 to: 85)
				declaredAt: (15 to: 21))
		with:
			(aPassword
				cover: (93 to: 101)
				declaredAt: (29 to: 37)) ] valueCoveringAll:
		{65 to: 77. 87 to: 91}) ifFalse: [
		[
		(self coverAll:
			{118 to: 121}) signalUsernameOrPasswordIsInvalid ] valueCoveringAll:
			{123 to: 155} ]] valueCoveringAll:
		{107 to: 114}.! !
!Behavior method!
authenticate: aUsername with: aPassword
	^ booleanToReturn
		cover: (46 to: 60)
		declaredAt: (46 to: 60).! !
!Behavior method!
createCartForCustomerIdentifiedAs: aUserId
	^ [
	(CartOfCustomer
		cover: (48 to: 61)
		declaredAt: (48 to: 61))
		for:
			([
			(Cart
				cover: (69 to: 72)
				declaredAt: (69 to: 72)) acceptingItemsOf:
				(catalog
					cover: (92 to: 98)
					declaredAt: (92 to: 98)) ] valueCoveringAll:
				{74 to: 90})
		atPointInTime:
			([
			(clock
				cover: (128 to: 132)
				declaredAt: (128 to: 132)) now ] valueCoveringAll:
				{134 to: 136})
		belongingToUserIdentifiedAs:
			(aUserId
				cover: (179 to: 185)
				declaredAt: (36 to: 42)) ] valueCoveringAll:
		{63 to: 66. 113 to: 126. 150 to: 177}.! !
!Behavior method!
now
	^ [
	([
	(self coverAll:
		{8 to: 11}) globalClock ] valueCoveringAll:
		{13 to: 23}) next:
		(timeOffset
			cover: (31 to: 40)
			declaredAt: (31 to: 40)) ] valueCoveringAll:
		{25 to: 29}.! !
!Behavior method!
globalClock
	^ [
	(GregorianDateTime
		cover: (16 to: 32)
		declaredAt: (16 to: 32)) now ] valueCoveringAll:
		{34 to: 36}.! !
!Behavior method!
for: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId
	^ [
	([
	(self coverAll:
		{81 to: 84}) new ] valueCoveringAll:
		{86 to: 88})
		initializeFor:
			(aCart
				cover: (105 to: 109)
				declaredAt: (6 to: 10))
		atPointInTime:
			(aDateTime
				cover: (126 to: 134)
				declaredAt: (27 to: 35))
		belongingToUserIdentifiedAs:
			(anUserId
				cover: (165 to: 172)
				declaredAt: (66 to: 73)) ] valueCoveringAll:
		{90 to: 103. 111 to: 124. 136 to: 163}.! !
!Behavior method!
initializeFor: aCart atPointInTime: aDateTime belongingToUserIdentifiedAs: anUserId
	(cart _ aCart
		cover: (98 to: 102)
		declaredAt: (16 to: 20))
		cover: (90 to: 93)
		declaredAt: (90 to: 93).
	(timeLastUsed _ aDateTime
		cover: (122 to: 130)
		declaredAt: (37 to: 45))
		cover: (106 to: 117)
		declaredAt: (106 to: 117).
	(userId _ anUserId
		cover: (144 to: 151)
		declaredAt: (76 to: 83))
		cover: (134 to: 139)
		declaredAt: (134 to: 139).! !
!Behavior method!
generateNewId
	| currentId |
	(currentId _ newId
		cover: (44 to: 48)
		declaredAt: (44 to: 48))
		cover: (32 to: 40)
		declaredAt: (19 to: 27).
	(newId _ [
	(newId
		cover: (52 to: 56)
		declaredAt: (44 to: 48)) +
		(1 coverAll:
			{68 to: 68}) ] valueCoveringAll:
		{66 to: 66})
		cover: (60 to: 64)
		declaredAt: (44 to: 48).
	^ currentId
		cover: (73 to: 81)
		declaredAt: (19 to: 27).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(self coverAll:
		{24 to: 27}) cartWithId:
		(aCartId
			cover: (41 to: 47)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{29 to: 39}) contents ] valueCoveringAll:
		{50 to: 57}.! !
!Behavior method!
cartWithId: aCartId
	| cartOfCostumer |
	(cartOfCostumer _ [
	(currentCarts
		cover: (61 to: 72)
		declaredAt: (61 to: 72))
		at:
			(aCartId
				cover: (78 to: 84)
				declaredAt: (13 to: 19))
		ifAbsent: [
			[
			(self coverAll:
				{98 to: 101}) signalCartIdIsInvalid ] valueCoveringAll:
				{103 to: 123} ]] valueCoveringAll:
		{74 to: 76. 86 to: 94})
		cover: (44 to: 57)
		declaredAt: (25 to: 38).
	[
	([
	(cartOfCostumer
		cover: (132 to: 145)
		declaredAt: (25 to: 38)) stillValidAt:
		([
		(clock
			cover: (161 to: 165)
			declaredAt: (161 to: 165)) now ] valueCoveringAll:
			{167 to: 169}) ] valueCoveringAll:
		{147 to: 159}) ifFalse: [
		[
		(self coverAll:
			{183 to: 186}) signalAndDeleteInvalidCart:
			(aCartId
				cover: (216 to: 222)
				declaredAt: (13 to: 19)) ] valueCoveringAll:
			{188 to: 214} ]] valueCoveringAll:
		{172 to: 179}.
	[
	(cartOfCostumer
		cover: (228 to: 241)
		declaredAt: (25 to: 38)) touch:
		([
		(clock
			cover: (250 to: 254)
			declaredAt: (161 to: 165)) now ] valueCoveringAll:
			{256 to: 258}) ] valueCoveringAll:
		{243 to: 248}.
	^ [
	(cartOfCostumer
		cover: (265 to: 278)
		declaredAt: (25 to: 38)) cart ] valueCoveringAll:
		{280 to: 283}.! !
!Behavior method!
stillValidAt: aDateTime
	^ [
	(aDateTime
		cover: (28 to: 36)
		declaredAt: (15 to: 23)) <
		([
		(timeLastUsed
			cover: (41 to: 52)
			declaredAt: (41 to: 52)) next:
			([
			(30 coverAll:
				{60 to: 61}) *
				(minute
					cover: (63 to: 68)
					declaredAt: (63 to: 68)) ] valueCoveringAll:
				{62 to: 62}) ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
touch: aDateTime
	(timeLastUsed _ aDateTime
		cover: (37 to: 45)
		declaredAt: (8 to: 16))
		cover: (22 to: 33)
		declaredAt: (22 to: 33).! !
!Behavior method!
cart
	^ cart
		cover: (9 to: 12)
		declaredAt: (9 to: 12).! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
signalUsernameOrPasswordIsInvalid
	^ [
	(self coverAll:
		{39 to: 42}) error:
		([
		([
		(self coverAll:
			{51 to: 54}) class ] valueCoveringAll:
			{56 to: 60}) usernameOrPasswordIsInvalidErrorMessage ] valueCoveringAll:
			{62 to: 100}) ] valueCoveringAll:
		{44 to: 49}.! !
!Behavior method!
usernameOrPasswordIsInvalidErrorMessage
	^ 'Username or password is invalid!!' coverAll:
		{45 to: 78}.! !

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
addToCart: aCartId product: aProduct withOccurrences: aQuantity
	[
	([
	(self coverAll:
		{68 to: 71}) cartWithId:
		(aCartId
			cover: (85 to: 91)
			declaredAt: (12 to: 18)) ] valueCoveringAll:
		{73 to: 83})
		add:
			(aQuantity
				cover: (99 to: 107)
				declaredAt: (55 to: 63))
		of:
			(aProduct
				cover: (113 to: 120)
				declaredAt: (29 to: 36)) ] valueCoveringAll:
		{94 to: 97. 109 to: 111}.! !

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
anotherValidUserId
	^ 2345 coverAll:
		{24 to: 27}.! !

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
signalCartIdIsInvalid
	^ [
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) cartIdDoesNotExistErrorMessage ] valueCoveringAll:
			{50 to: 79}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
cartIdDoesNotExistErrorMessage
	^ 'No cart was found' coverAll:
		{36 to: 54}.! !

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
validCCNumber
	^ 1234567890 coverAll:
		{18 to: 27}.! !
!Behavior method!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate
	| cartToCheckout cashier purchasesOfUser |
	(cartToCheckout _ [
	(self coverAll:
		{155 to: 158}) cartWithId:
		(aCartId
			cover: (172 to: 178)
			declaredAt: (15 to: 21)) ] valueCoveringAll:
		{160 to: 170})
		cover: (138 to: 151)
		declaredAt: (96 to: 109).
	(purchasesOfUser _ [
	(self coverAll:
		{202 to: 205}) purchasesOfUserIdentifiedAs:
		([
		(self coverAll:
			{237 to: 240}) userIdOfCartIdentifiedAs:
			(aCartId
				cover: (268 to: 274)
				declaredAt: (15 to: 21)) ] valueCoveringAll:
			{242 to: 266}) ] valueCoveringAll:
		{207 to: 234})
		cover: (184 to: 198)
		declaredAt: (119 to: 133).
	(cashier _ [
	(Cashier
		cover: (291 to: 297)
		declaredAt: (291 to: 297))
		toCheckout:
			(cartToCheckout
				cover: (311 to: 324)
				declaredAt: (96 to: 109))
		charging:
			([
			(CreditCard
				cover: (343 to: 352)
				declaredAt: (343 to: 352)) expiringOn:
				(anExpirationDate
					cover: (366 to: 381)
					declaredAt: (71 to: 86)) ] valueCoveringAll:
				{354 to: 364})
		throught:
			(merchantProcessor
				cover: (399 to: 415)
				declaredAt: (399 to: 415))
		on:
			([
			(FixedGregorianDate
				cover: (425 to: 442)
				declaredAt: (425 to: 442)) today ] valueCoveringAll:
				{444 to: 448})
		registeringOn:
			(purchasesOfUser
				cover: (469 to: 483)
				declaredAt: (119 to: 133)) ] valueCoveringAll:
		{299 to: 309. 332 to: 340. 389 to: 397. 421 to: 423. 454 to: 467})
		cover: (281 to: 287)
		declaredAt: (111 to: 117).
	[
	(cashier
		cover: (493 to: 499)
		declaredAt: (111 to: 117)) checkOut ] valueCoveringAll:
		{501 to: 508}.! !

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
listPurchasesOf: anUserId with: aPassword
	[
	(self coverAll:
		{45 to: 48})
		authenticate:
			(anUserId
				cover: (64 to: 71)
				declaredAt: (18 to: 25))
		with:
			(aPassword
				cover: (79 to: 87)
				declaredAt: (33 to: 41)) ] valueCoveringAll:
		{50 to: 62. 73 to: 77}.
	^ [
	(self coverAll:
		{95 to: 98}) purchasesOfUserIdentifiedAs:
		(anUserId
			cover: (129 to: 136)
			declaredAt: (18 to: 25)) ] valueCoveringAll:
		{100 to: 127}.! !
!Behavior method!
purchasesOfUserIdentifiedAs: anUserId
	^ [
	(customerPurchases
		cover: (42 to: 58)
		declaredAt: (42 to: 58))
		at:
			(anUserId
				cover: (64 to: 71)
				declaredAt: (30 to: 37))
		ifAbsent: [
			[
			(customerPurchases
				cover: (88 to: 104)
				declaredAt: (42 to: 58))
				at:
					(anUserId
						cover: (110 to: 117)
						declaredAt: (30 to: 37))
				put:
					([
					(CustomerPurchaseHistory
						cover: (124 to: 146)
						declaredAt: (124 to: 146)) new ] valueCoveringAll:
						{148 to: 150}) ] valueCoveringAll:
				{106 to: 108. 119 to: 122} ]] valueCoveringAll:
		{60 to: 62. 76 to: 84}.! !
!Behavior method!
initialize
	(sales _ [
	(OrderedCollection
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).! !
!Behavior method!
products
	| bagOfProducts |
	(bagOfProducts _ [
	(Bag
		cover: (49 to: 51)
		declaredAt: (49 to: 51)) new ] valueCoveringAll:
		{53 to: 55})
		cover: (33 to: 45)
		declaredAt: (14 to: 26).
	[
	(sales
		cover: (59 to: 63)
		declaredAt: (59 to: 63)) do: [ :aSale |
		[
		(bagOfProducts
			cover: (80 to: 92)
			declaredAt: (14 to: 26)) addAll:
			([
			(aSale
				cover: (102 to: 106)
				declaredAt: (72 to: 76)) products ] valueCoveringAll:
				{108 to: 115}) ] valueCoveringAll:
			{94 to: 100} ]] valueCoveringAll:
		{65 to: 67}.
	^ bagOfProducts
		cover: (122 to: 134)
		declaredAt: (14 to: 26).! !

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
userIdOfCartIdentifiedAs: aCartId
	^ [
	([
	(currentCarts
		cover: (39 to: 50)
		declaredAt: (39 to: 50))
		at:
			(aCartId
				cover: (56 to: 62)
				declaredAt: (27 to: 33))
		ifAbsent: [
			[
			(self coverAll:
				{76 to: 79}) signalCartIdIsInvalid ] valueCoveringAll:
				{81 to: 101} ]] valueCoveringAll:
		{52 to: 54. 64 to: 72}) userId ] valueCoveringAll:
		{106 to: 111}.! !
!Behavior method!
userId
	^ userId
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
add: aSale
	[
	(sales
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) add:
		(aSale
			cover: (25 to: 29)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{20 to: 23}.! !
!Behavior method!
total
	^ [
	(sales
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) sum: [ :aSale |
		[
		(aSale
			cover: (32 to: 36)
			declaredAt: (24 to: 28)) total ] valueCoveringAll:
			{38 to: 42} ]] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
products
	^ products
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!Behavior method!
skipAhead: anAmountOfTime
	(timeOffset _ [
	(timeOffset
		cover: (29 to: 38)
		declaredAt: (29 to: 38)) +
		(anAmountOfTime
			cover: (55 to: 68)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{53 to: 53})
		cover: (42 to: 51)
		declaredAt: (29 to: 38).! !
!Behavior method!
signalAndDeleteInvalidCart: aCartId
	[
	(currentCarts
		cover: (39 to: 50)
		declaredAt: (39 to: 50)) removeKey:
		(aCartId
			cover: (63 to: 69)
			declaredAt: (29 to: 35)) ] valueCoveringAll:
		{52 to: 61}.
	[
	(self coverAll:
		{73 to: 76}) signalCartIdIsInvalid ] valueCoveringAll:
		{78 to: 98}.! !

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases stamp: 'MF 11/10/2021 22:52:21'!
PASSED!

!testRun: #RestInterfaceTest #test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts stamp: 'MF 11/10/2021 22:52:21'!
PASSED!
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/10/2021 22:53:32' prior: 50923824!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/10/2021 22:54:45' prior: 50925131!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: clock now
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 22:54:57'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/10/2021 22:54:57'!
PASSED!

!testRun: #RestInterfaceTest #test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases stamp: 'MF 11/10/2021 22:54:57'!
ERROR!

!testRun: #RestInterfaceTest #test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts stamp: 'MF 11/10/2021 22:54:57'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 22:55:05'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/10/2021 22:55:05'!
PASSED!

!testRun: #RestInterfaceTest #test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases stamp: 'MF 11/10/2021 22:55:05'!
ERROR!

!testRun: #RestInterfaceTest #test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts stamp: 'MF 11/10/2021 22:55:05'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MF 11/10/2021 22:55:28'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 22:55:34'!
ERROR!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/10/2021 22:55:34'!
PASSED!

!testRun: #RestInterfaceTest #test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases stamp: 'MF 11/10/2021 22:55:34'!
ERROR!

!testRun: #RestInterfaceTest #test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts stamp: 'MF 11/10/2021 22:55:34'!
ERROR!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 22:55:36'!
ERROR!
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/10/2021 22:53:32' prior: 50925150!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: FixedGregorianDate today
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/10/2021 23:02:25' prior: 50925420!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: clock now
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !

clock now!

clock now!
!RestInterface methodsFor: 'purchasing' stamp: 'MF 11/10/2021 23:03:14' prior: 50925439!
checkOutCart: aCartId with: aCreditCardNumber of: anOwner expiringOn: anExpirationDate   
	
	| cartToCheckout cashier purchasesOfUser |
	cartToCheckout _ self cartWithId: aCartId.
	
	purchasesOfUser _ self purchasesOfUserIdentifiedAs: (self userIdOfCartIdentifiedAs: aCartId).
	
	cashier _ Cashier toCheckout: cartToCheckout  
				charging: (CreditCard expiringOn: anExpirationDate) 
				throught: merchantProcessor
				on: clock now monthOfYear
				registeringOn: purchasesOfUser .
				
	cashier checkOut.
	! !

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 23:03:18'!
PASSED!

!testRun: #RestInterfaceTest #test01ListOfEmptyCartIsEmpty stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test02CantCreateCartWithInvalidCredentials stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test03ListOfCartWithAnItemIncludesThatItem stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test04ListingDifferentCartsReturnsDifferentResults stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test05CantListWithAnInvalidCartId stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test06CantAddToCartWithInvalidCartId stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test07CantCheckoutCartWithInvalidCartId stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test08ListOfPurchasesOfUserWithNoPurchasesIsEmpty stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test09CantListPurchasesWithInvalidCredentials stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test10ListOfPurchasesOfUserWithAPurchaseIncludesThatPurchase stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test11CantListAnExpiredCart stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test12CantAddToAnExpiredCart stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test13CantCheckoutAnExpiredCart stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test14ExpireTimeOfCartIsRefreshedAfterUse stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test15ListingPurchasesOfDifferentUsersReturnsDifferentPurchases stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test16ListingPurchasesOfUserWithMoreThanOneCheckoutReturnsPurchasesOfAllCheckouts stamp: 'MF 11/10/2021 23:03:28'!
PASSED!

----SNAPSHOT----(10 November 2021 23:07:12) CuisUniversity-4913.image priorSource: 18952157!